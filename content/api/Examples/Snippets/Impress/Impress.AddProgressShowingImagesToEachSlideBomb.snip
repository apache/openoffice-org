<?xml version="1.0"?>
<!--
$RCSfile: Impress.AddProgressShowingImagesToEachSlideBomb.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2007/08/13 13:05:15 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Impress">

<keywords>
	<keyword>progress</keyword>
	<keyword>bomb</keyword>
</keywords>

<authors>
	<author id="" initial="true" email="dominik.gundacker@gmail.com">Dominik Gundacker</author>
</authors>

<question heading="Add progress showing images on each slide">How to add progress showing images on each slide of a presentation


<p>There will be a bomb with a fuse. The flame will burn down the fuse till it reaches the bomb at the last slide. Then there will be a additional slide at the end that shows the explosion</p>
</question>

<answer>
<listing>/* Macro, which generates a fuse with a bomb, when the fuse has burned down,
   the bomb will explode */
/* 03_bomb.rex */
xScriptContext=uno.getScriptContext()  -- get the xScriptContext object
oDoc=xScriptContext~getDocument  -- get the document service (an XModel object)
/* retrieving the important interfaces to get access to the drawpages */
xDrawPagesSupplier=oDoc~{%see com.sun.star.drawing.XDrawPagesSupplier%XDrawPagesSupplier}
xImpressFactory = oDoc~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
xDrawPages = xDrawPagesSupplier~getDrawPages
/* global service manager for shape grouper */
xContext = xScriptContext~getComponentContext
XMcf = xContext~getServiceManager
CALL removeSelection oDoc
/* remove the explosion page, if it exists */

CALL getNumberOfVisibleSlides xDrawPages
pagecount=result
IF pagecount &lt;= 2 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has less than three slide. &quot;-
    &quot;There is no need for running this macro!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END
pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount 
DO i = 1 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
  IF(xDrawPage~{%see com.sun.star.container.XNamed%XNamed}~getName() == &quot;explosion_page&quot;) THEN
  DO
    xDrawPages~remove(xDrawPage)
    ITERATE
  END
END
/* initialize all variables (height, width, etc.) */

CALL getNumberOfVisibleSlides xDrawPages
pagecount=result

firstDrawPageProps = xDrawPages~getByIndex(0)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}~{%see com.sun.star.beans.XPropertySet%XPropertySet}
width = firstDrawPageProps~getPropertyValue(&quot;Width&quot;)
height = firstDrawPageProps~getPropertyValue(&quot;Height&quot;)
bombPositionX = width - 2500
shapeX = 500
shapeY = height - 2450

step = trunc( (width - 3150) / (pagecount - 2))

positionFlame = shapeX
lengthCord = bombPositionX - 800

CALL GetPresentationDirectory oDoc~getURL
directory = result
separator = .uno~file.separator
CALL getFirstVisibleSlide xDrawPages
startIndex = result + 1
pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount 
DO i = 0 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}

  /* remove existing bombs, if necessary */
  xShapes = xDrawPage~{%see com.sun.star.drawing.XShapes%XShapes}
  DO j = 0 TO xShapes~getCount - 1
     xShape = xShapes~getByIndex(j)
     IF(xShape~{%see com.sun.star.container.XNamed%XNamed}~getName() == &quot;bomb_group&quot;) THEN
     DO
        xShapeGroup = xShape~{%see com.sun.star.drawing.XShapeGroup%XShapeGroup}
        xDrawPage~remove(xShapeGroup)
     END
  END
  xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF(xProps~getPropertyValue(&quot;Visible&quot;) == 0 | i &lt; startIndex) THEN
    ITERATE
  /* creating and positioning of the bomb */
  bomb = xImpressFactory~createInstance(-
    &quot;{%see com.sun.star.drawing.GraphicObjectShape}&quot;) 
  bomb = bomb~{%see com.sun.star.drawing.XShape%XShape}
  CALL setSizeAndPosition bomb, 2100, 2150, bombPositionX, shapeY
  bombProps=bomb~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  bombProps~setPropertyValue(&quot;GraphicURL&quot;,-
  	uno.convertToURL(directory||separator||&quot;bomb.gif&quot;))
  xDrawPage~add(bomb)

   /* creating and positioning of the cord */
   cord = xImpressFactory~createInstance(-
     &quot;{%see com.sun.star.drawing.RectangleShape}&quot;) 
   cord = cord~{%see com.sun.star.drawing.XShape%XShape}
   CALL setSizeAndPosition cord, lengthCord, 100,-
     positionFlame + 700, shapeY + 1300
   cordProps=cord~{%see com.sun.star.beans.XPropertySet%XPropertySet}
   cordProps~setPropertyValue(&quot;FillColor&quot;, box(&quot;int&quot;, &quot;FFFF00&quot;x ~c2d))
   xDrawPage~add(cord)

   /* creating and positioning of the fuse */
   fuse = xImpressFactory~createInstance(-
     &quot;{%see com.sun.star.drawing.GraphicObjectShape}&quot;) 
   fuse = fuse~{%see com.sun.star.drawing.XShape%XShape}
   CALL setSizeAndPosition fuse, 1000, 1000, positionFlame, shapeY + 940
   fuseProps=fuse~{%see com.sun.star.beans.XPropertySet%XPropertySet}
   fuseProps~setPropertyValue(&quot;GraphicURL&quot;,-
     uno.convertToURL(directory||separator||&quot;fuse.png&quot;))
   xDrawPage~add(fuse)

   /* create the group */
   shapeGroup = xMcf~createInstanceWithContext(-
     &quot;{%see com.sun.star.drawing.ShapeCollection}&quot;, xContext)
   shapeGroup = shapeGroup~{%see com.sun.star.drawing.XShapes%XShapes}
   shapeGroup~add(bomb)
   shapeGroup~add(cord)
   shapeGroup~add(fuse)
   xShapeGrouper = xDrawPage~{%see com.sun.star.drawing.XShapeGrouper%XShapeGrouper}
   xShapeGroup = xShapeGrouper~group(shapeGroup)
   name = xShapeGroup~{%see com.sun.star.container.XNamed%XNamed} 
   name~setName(&quot;bomb_group&quot;) 

   positionFlame = positionFlame + step
   lengthCord = lengthCord - step
END
 
/* creating, resizing and positioning of the explosion page and content*/
xDrawPages~insertNewByIndex(pagecount)
explosionPage = xDrawPages~getByIndex(pagecount)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
explosionPage~{%see com.sun.star.container.XNamed%XNamed}~setName(&quot;explosion_page&quot;)
textShape = xImpressFactory~createInstance(&quot;{%see com.sun.star.drawing.TextShape}&quot;) 
textShape = textShape~{%see com.sun.star.drawing.XShape%XShape}
CALL setSizeAndPosition textShape, 23000, 3000, 3000, 2000
explosionPage~add(textShape)

explosion = xImpressFactory~createInstance(-
  &quot;{%see com.sun.star.drawing.GraphicObjectShape}&quot;) 
explosion = explosion~{%see com.sun.star.drawing.XShape%XShape}
CALL setSizeAndPosition explosion, 20000, 15000, 4200, 5000
explosionPage~add(explosion)

explosionProps = explosion~{%see com.sun.star.beans.XPropertySet%XPropertySet}
explosionProps~setPropertyValue(&quot;GraphicURL&quot;,-
  uno.convertToURL(directory||separator||&quot;explosion.jpg&quot;))
textProps = textShape~{%see com.sun.star.beans.XPropertySet%XPropertySet}
textProps~setPropertyValue(&quot;TextFitToSize&quot;,-
    bsf.getConstant(&quot;{%see com.sun.star.drawing.TextFitToSizeType}&quot;,&quot;PROPORTIONAL&quot;))
effects = bsf.wrapStaticFields(&quot;{%see com.sun.star.presentation.AnimationEffect}&quot;)
speeds = bsf.wrapStaticFields(&quot;{%see com.sun.star.presentation.AnimationSpeed}&quot;)
textProps~setPropertyValue(&quot;Effect&quot;, effects~FADE_FROM_CENTER)
textProps~setPropertyValue(&quot;Speed&quot;, speeds~FAST)
explosionProps~setPropertyValue(&quot;Effect&quot;, effects~HORIZONTAL_ROTATE)
explosionProps~setPropertyValue(&quot;Speed&quot;, speeds~MEDIUM)
	  
/* formating the textshapes */
textShape~{%see com.sun.star.text.XText%XText}~setString(&quot;BOOOOOOOMMMMM!!!!!!&quot;)

explosionPageProps = explosionPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
explosionPageProps~setPropertyValue(&quot;Effect&quot;,-
  bsf.getConstant(&quot;{%see com.sun.star.presentation.FadeEffect}&quot;, &quot;RANDOM&quot;))
explosionPageProps~setPropertyValue(&quot;Speed&quot;, speeds~MEDIUM)

EXIT 0

/* routine for getting the directory of the presentation */
GetPresentationDirectory :
  use arg  path

  separator = .uno~file.separator
  full = REVERSE(uno.convertFromURL(path))
  parse var full &quot;pdo.&quot; filename (separator) directory
  directory = REVERSE(directory)

return directory

/* Returns the number of visible slides */
getNumberOfVisibleSlides :
  USE ARG xDrawPages
  count = 0
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      count = count + 1
  END
return count

/* Returns the index of the first visible slide */
getFirstVisibleSlide :
  USE ARG xDrawPages
  index = -1
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      return i
  END
return index

::requires UNO.CLS   -- load UNO support for OpenOffice.org

/* routine for positioning and resizing a shape */
::routine  setSizeAndPosition
  use arg shape, width, height, posX, posY

  shape~setSize(-
    .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;, width, height))
  shape~setPosition(.bsf~new(&quot;{%see com.sun.star.awt.Point}&quot;, posX, posY))	

/* routine for removing selection*/
::routine  removeSelection
  use arg oDoc

  model= oDoc~{%see com.sun.star.frame.XModel%XModel}
  controller = model~getCurrentController()
  selectionController = controller~{%see com.sun.star.view.XSelectionSupplier%XSelectionSupplier}
  selected = selectionController~getSelection()
  selectionController~select(.nil)</listing>
</answer>

<versions>
</versions>

<operating-systems>
</operating-systems>

<changelog>
</changelog>

</snippet>
