<!--
$RCS index.html,v $

last change: $Revision: 1.2 $ $Author: tomsontom $ $Date: 2006/07/06 13:02:00 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCS in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="Cpp" application="Impress">

<keywords>
</keywords>

<authors>
	<author id="cj" initial="true" email="christian@TreesforLife.org">Christian Junker</author>
</authors>

<question heading="dealing with impress documents">
How do I deal with Impress documents
<p>... demonstrate some common things</p>
</question>

<answer>
<p>... some common things one can do with impress documents</p>
<listing>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#include &lt;cppuhelper/bootstrap.hxx&gt;

#include &lt;osl/file.hxx&gt;
#include &lt;osl/process.h&gt;

#include &lt;com/sun/star/bridge/XUnoUrlResolver.hpp&gt;

#ifdef _COM_SUN_STAR_BRIDGE_XUNOURLRESOLVER_HPP_

#include &lt;com/sun/star/frame/XComponentLoader.hpp&gt;
#include &lt;com/sun/star/beans/XPropertySet.hpp&gt;
#include &lt;com/sun/star/drawing/XDrawPagesSupplier.hpp&gt;
#include &lt;com/sun/star/document/XDocumentInfoSupplier.hpp&gt;
#include &lt;com/sun/star/drawing/XDrawPages.hpp&gt;
#include &lt;com/sun/star/drawing/XDrawPage.hpp&gt;
#include &lt;com/sun/star/container/XNamed.hpp&gt;
#include &lt;com/sun/star/frame/XModel.hpp&gt;
#include &lt;com/sun/star/frame/XController.hpp&gt;
#include &lt;com/sun/star/drawing/XDrawView.hpp&gt;
#include &lt;com/sun/star/lang/XMultiServiceFactory.hpp&gt;
#include &lt;com/sun/star/drawing/XShape.hpp&gt;
#include &lt;com/sun/star/text/XText.hpp&gt;
#include &lt;com/sun/star/presentation/XPresentationSupplier.hpp&gt;
#include &lt;com/sun/star/presentation/XPresentation.hpp&gt;


// handy cause OUStrings are very often used in the API
#define createStr(x)            (OUString::createFromAscii(x))   

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                             */

using namespace rtl;
using namespace com::sun::star::uno;
using namespace com::sun::star::lang;
using namespace com::sun::star::frame;
using namespace com::sun::star::drawing;

using com::sun::star::registry::XSimpleRegistry;
using com::sun::star::beans::XPropertySet;
using com::sun::star::bridge::XUnoUrlResolver;
using com::sun::star::lang::XMultiServiceFactory;
using com::sun::star::text::XText;

// Function declarations
void ChangeTitle(const Reference &lt;XDrawPagesSupplier&gt; Document);
void Presentation(const Reference &lt;XComponent&gt; &amp;Component);
void MakePosition(sal_Int32 x, sal_Int32 y, ::com::sun::star::awt::Point *Position );
void MakeSize(sal_Int32 x, sal_Int32 y, ::com::sun::star::awt::Size *Size );
void DrawMe(Reference &lt;XShape&gt; &amp;Shape, Reference &lt;XDrawPage&gt; &amp;page, const char *shapename);

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                */

int SAL_CALL main( int argc, char *argv[] )
{

        /***************************
         *** INITIALIZATION PART ***
         ***************************/
        
        OUString sConnectionString(RTL_CONSTASCII_USTRINGPARAM(&quot;uno:socket,host=localhost,port=8100;urp;StarOffice.ServiceManager&quot;));

	// Creates a simple registry service instance.
        Reference &lt;XSimpleRegistry&gt; registry(
                ::cppu::createSimpleRegistry() );

        // Connects the registry to a persistent data source represented by an URL.
        registry-&gt;open( OUString( RTL_CONSTASCII_USTRINGPARAM(
        &quot;DocumentLoader.rdb&quot;) ), sal_True, sal_False );

        Reference &lt;XComponentContext&gt; context(
                ::cppu::bootstrap_InitialComponentContext(registry) );

        // creates the local ServiceManager
	Reference &lt;XMultiComponentFactory&gt; xMultiComponentFactoryClient(
		context-&gt;getServiceManager() );

        /* Creates an instance of a component which supports the services specified
        by the factory.
        */
        Reference &lt;XInterface&gt; xInterface =
                xMultiComponentFactoryClient-&gt;createInstanceWithContext(
                              createStr(&quot;com.sun.star.bridge.UnoUrlResolver&quot;), context );

        Reference &lt;XUnoUrlResolver&gt; resolver(xInterface, UNO_QUERY);

        // Resolves the component context from the office, on the uno URL given by argv[1].
        try
        {
                xInterface = Reference &lt;XInterface&gt;(
                resolver-&gt;resolve( sConnectionString ), UNO_QUERY );
        }
        catch ( Exception &amp;e )
        {
		printf(&quot;Error: cannot establish a connection using &apos;%s&apos;:\n       %s\n&quot;,
                OUStringToOString(sConnectionString, RTL_TEXTENCODING_ASCII_US).getStr(),
                OUStringToOString(e.Message, RTL_TEXTENCODING_ASCII_US).getStr());
		exit(1);
        }

        // gets the server component context as property of the office component factory
        Reference &lt;XPropertySet&gt; mgrPropSet( xInterface, UNO_QUERY );
        mgrPropSet-&gt;getPropertyValue( createStr(&quot;DefaultContext&quot;) ) &gt;&gt;= context;


        // gets the service manager from the office
        Reference &lt;XMultiComponentFactory&gt; oomgr( context-&gt;getServiceManager() );

        
        /**********************
         **** CONNECTED !! ****
         **********************/

        Reference &lt;XComponentLoader&gt; comploader(
                oomgr-&gt;createInstanceWithContext(
                        OUString( RTL_CONSTASCII_USTRINGPARAM(&quot;com.sun.star.frame.Desktop&quot; ) ),
                        context ), UNO_QUERY );

        Reference &lt;XComponent&gt; component = comploader-&gt;loadComponentFromURL(
                createStr(&quot;private:factory/simpress&quot;), OUString( RTL_CONSTASCII_USTRINGPARAM(&quot;_blank&quot;) ),
                0, Sequence &lt;::com::sun::star::beans::PropertyValue&gt;() );


        Reference &lt;XDrawPagesSupplier&gt; oDoc(component, UNO_QUERY);

        // set the Title with XDocumentInfoSupplier
        ChangeTitle(oDoc);

        // get DrawPages Container
        Reference &lt;XDrawPages&gt; drawpages = oDoc-&gt;getDrawPages();
        // for index access and counting usage
        Reference &lt;::com::sun::star::container::XIndexAccess&gt; pagecount(drawpages, UNO_QUERY); 

        // insert a new drawpage -- identifier: newDrawPage
        Reference &lt;XDrawPage&gt; newDrawPage = drawpages-&gt;insertNewByIndex(0);
        Reference &lt;::com::sun::star::container::XNamed&gt; namecontainer(newDrawPage, UNO_QUERY);

        // count pages and print them out to stdout
        sal_Int16 countresult = pagecount-&gt;getCount();
        printf(&quot;\nThere are %d pages in the Impress document\n\n&quot;, countresult);

        //Loop through all pages and give Pagenumber+Pagename to each of them
        for (int icounter = 0; icounter &lt; pagecount-&gt;getCount(); icounter++)
        {
                Any mPage = pagecount-&gt;getByIndex(icounter);
                Reference &lt;XDrawPage&gt; drawpage(mPage, UNO_QUERY);
                Reference &lt;::com::sun::star::container::XNamed&gt; names(drawpage, UNO_QUERY);
                OUString pagename = names-&gt;getName();
                OString sName = OUStringToOString( pagename , RTL_TEXTENCODING_ASCII_US );
                printf(&quot;\n Page Number %d has the name %s&quot;, icounter, sName.getStr());
        }


        // Playing around with the inserted page...
        namecontainer-&gt;setName(createStr(&quot;My second page&quot;));

        OUString Name;
        Name = namecontainer-&gt;getName();
        OString sName = rtl::OUStringToOString( Name , RTL_TEXTENCODING_ASCII_US );

        // get the Number of the inserted page
        Reference &lt;XPropertySet&gt; PageProps(newDrawPage, UNO_QUERY);
        Any mValue;
        mValue = PageProps-&gt;getPropertyValue( createStr(&quot;Number&quot;) );

        // conversion...
        sal_Int32 pagenumber;
        mValue &gt;&gt;= pagenumber;

        //print the PropertyValue out:
        printf(&quot;\n\nThe newly inserted page \&apos;%s\&apos; is in position %d&quot;, sName.getStr(), pagenumber);


        // set the focus on the newly inserted page
        Reference &lt;XModel&gt; xmodel(oDoc, UNO_QUERY);
        Reference &lt;XController&gt; ctl = xmodel-&gt;getCurrentController();
        Reference &lt;XDrawView&gt; oview(ctl, UNO_QUERY);
        oview-&gt;setCurrentPage(newDrawPage);


        /**********************
         **** DRAWING PART ****
         **********************/

        // get Document factory
        Reference &lt;XMultiServiceFactory&gt; DocFactory(component, UNO_QUERY);
        
        // allocate memory!!
        ::com::sun::star::awt::Point *Pos = new ( ::com::sun::star::awt::Point );
        ::com::sun::star::awt::Size *Size = new ( ::com::sun::star::awt::Size );


        /* ~~ ON FIRST PAGE ~~ */
        MakePosition(7000, 7000, Pos);
        MakeSize(16000, 3000, Size);

        // instantiate TextShape and assign properties
        Reference &lt;XInterface&gt; textshape = DocFactory-&gt;createInstance(
                createStr(&quot;com.sun.star.drawing.TextShape&quot;) );
        Reference &lt;XShape&gt; txtShape(textshape, UNO_QUERY);
        txtShape-&gt;setPosition(*Pos);
        txtShape-&gt;setSize(*Size);

        Any mfirstpage = pagecount-&gt;getByIndex(0);
        Reference &lt;XDrawPage&gt; page1(mfirstpage, UNO_QUERY);
        DrawMe(txtShape, page1, &quot;My TextShape&quot; );
        Reference &lt;XText&gt; Text(txtShape, UNO_QUERY);
        // use the much simpler method XTextRange setString() rather than insertTextContent()
        Text-&gt;setString(createStr(&quot;Hello to all people around the world&quot;)); 


        /* ~~ ON SECOND PAGE ~~ */
        MakePosition(2000, 6000, Pos);
        MakeSize(7000, 2000, Size);

        Reference &lt;XInterface&gt; rectangleshape = DocFactory-&gt;createInstance(
                createStr(&quot;com.sun.star.drawing.RectangleShape&quot;) );
        Reference &lt;XShape&gt; rectShape(rectangleshape, UNO_QUERY);
        rectShape-&gt;setPosition(*Pos);
        rectShape-&gt;setSize(*Size);
        DrawMe(rectShape, newDrawPage, &quot;My Rectangle&quot;);

        // release allocated memory
        delete Pos;
        delete Size;

        // play a Presentation
        Presentation(component);

        // dispose the local service manager
        Reference &lt;XComponent&gt;::query( xMultiComponentFactoryClient )-&gt;dispose();

        return 0;
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                             */

void ChangeTitle(const Reference &lt;XDrawPagesSupplier&gt; oDoc)
{
        Reference &lt;::com::sun::star::document::XDocumentInfoSupplier&gt; infosupplier( oDoc, UNO_QUERY );
        Reference &lt;::com::sun::star::document::XDocumentInfo&gt; docinfo = infosupplier-&gt;getDocumentInfo();
        Reference &lt;XPropertySet&gt; DocInfoProps(docinfo, UNO_QUERY );
        Any mTitle;
        //another method to create a PropertyValue with makeAny()
        mTitle = makeAny(createStr(&quot;First attempt&quot;));  
        Any *test_pointer = &amp;mTitle; // testing
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                */

void Presentation(const Reference &lt;XComponent&gt; &amp;component)
{
        Reference &lt;::com::sun::star::presentation::XPresentationSupplier&gt; showsupplier(component, UNO_QUERY);
        Reference &lt;::com::sun::star::presentation::XPresentation&gt; show = showsupplier-&gt;getPresentation();
        Reference &lt;XPropertySet&gt; mPres_Props(show, UNO_QUERY);
        sal_Int16 startpage = 0;
        mPres_Props-&gt;setPropertyValue(createStr(&quot;FirstPage&quot;), makeAny(startpage) );
        show-&gt;start();
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                */

void MakePosition(sal_Int32 x, sal_Int32 y, ::com::sun::star::awt::Point *Pos)
{

        Pos-&gt;X = x;
        Pos-&gt;Y = y;
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                */

void MakeSize(sal_Int32 width, sal_Int32 height, ::com::sun::star::awt::Size *Size)
{
        Size-&gt;Width = width;
        Size-&gt;Height = height;
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                */

void DrawMe(Reference &lt;XShape&gt; &amp;Shape, Reference &lt;XDrawPage&gt; &amp;page, const char *shapename)
{
        Reference &lt;XShapes&gt; Shapes(page, UNO_QUERY);
        Shapes-&gt;add(Shape);
        Reference &lt;XPropertySet&gt; shapeprops(Shape, UNO_QUERY);
        shapeprops-&gt;setPropertyValue( createStr(&quot;Name&quot;),
                 makeAny( createStr(shapename)) );
}


#else
#error &quot;No connection to UNO possible, necessary XUnoUrlResolver not included properly&quot;
#endif

</listing>
</answer>

<changelog>
	<change author-id="cj" date="2004-09-06">Initial version</change>
</changelog>

</snippet>
