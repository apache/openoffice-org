<?xml version="1.0"?>
<!--
$RCSfile: Impress.AddGuidepostsectionWithBookmarks.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2007/08/13 13:05:15 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Impress">

<keywords>
	<keyword>bookmarks</keyword>
	<keyword>guideposts</keyword>
	<keyword>headings</keyword>
</keywords>

<authors>
	<author id="" initial="true" email="dominik.gundacker@gmail.com">Dominik Gundacker</author>
</authors>

<question heading="Add a guidepostsection to the slides with bookmarks">How to add a guidepost section to each slide and linking the guideposts to the related slides using bookmarks 
</question>

<answer>
<listing>/* This macro does exactly the same as 07_guideposts, but displays the 
   headings in form of circles on the slides and marks it */
/* 08_guideposts_circles.rex */

xScriptContext=uno.getScriptContext()  -- get the xScriptContext object
oDoc=xScriptContext~getDocument  -- get the document service (an XModel object)
/* retrieving the important interfaces to get access to the drawpages */
xDrawPagesSupplier=oDoc~{%see com.sun.star.drawing.XDrawPagesSupplier%XDrawPagesSupplier}
xImpressFactory = oDoc~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
xDrawPages = xDrawPagesSupplier~getDrawPages
/* global service manager for shape grouper */
xContext = xScriptContext~getComponentContext
XMcf = xContext~getServiceManager
CALL removeSelection oDoc
/* check pagecount */
CALL getNumberOfVisibleSlides xDrawPages
pagecount = result


IF pagecount == 1 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has only one slide. &quot;-
    &quot;There is no need for running this macro!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END

firstDrawPageProps = xDrawPages~getByIndex(0)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}~{%see com.sun.star.beans.XPropertySet%XPropertySet}
height = firstDrawPageProps~getPropertyValue(&quot;Height&quot;)

/* ask for end-slide, the slide will get no guideposts */
hasEndSlide = .bsf.dialog~dialogBox(&quot;Is there an end-slide in &quot;-
  &quot;this presentation?&quot;, &quot;Question&quot;, &quot;question&quot;, &quot;YesNo&quot;)
headlineName = getHeadlineDisplayName(oDoc)
/* create array with index and title of each heading-slide */
headingIndex = .array ~new
counter = 0
startIndex = 0
pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount 
DO i = 0 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
  /* remove existing guideposts, if necessary */
  xShapes = xDrawPage~{%see com.sun.star.drawing.XShapes%XShapes}
  IF(xShapes~getCount &gt; 0) THEN
    DO j = 0 TO xShapes~getCount - 1
       xShape = xShapes~getByIndex(j)
       IF(xShape~{%see com.sun.star.container.XNamed%XNamed}~getName() == &quot;guidepost_group&quot;) THEN
       DO
          xShapeGroup = xShape~{%see com.sun.star.drawing.XShapeGroup%XShapeGroup}
          xDrawPage~remove(xShapeGroup)
       END
    END
  xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
  DO j = 0 TO xShapes~getCount - 1
     xShape = xShapes~getByIndex(j)
     xShapeProps = xShape~{%see com.sun.star.beans.XPropertySet%XPropertySet}
     style = xShapeProps~getPropertyValue(&quot;Style&quot;)
     styleProps = style~{%see com.sun.star.beans.XPropertySet%XPropertySet}
     nameStyle = styleProps~getPropertyValue(&quot;DisplayName&quot;)
     IF(xShape~{%see com.sun.star.text.XText%XText} == .nil) THEN
       ITERATE
     text = xShape~{%see com.sun.star.text.XText%XText}~getString()
     /* if the style is heading */
     IF (nameStyle == headlineName) THEN
     DO
        IF (startIndex == 0) THEN
          startIndex = i
        /* assign bookmark to each heading page */
        xPageName = xDrawPage~{%see com.sun.star.container.XNamed%XNamed} 
        xPageName~setName(i)
        headingIndex~put(i, counter+1)
        counter = counter + 1
     END
  END
END

/* there are no heading slides */
IF counter == 0 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has no heading textfields. &quot;-
    &quot;There is no need for running this macro!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END

IF hasEndSlide = 0 THEN
  endIndex = pagecount - 2
ELSE
  endIndex = pagecount - 1

stepY = trunc((height - 3000) / counter)
posY = 3000
countHeadings = counter
DO i = startIndex TO endIndex
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
  xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF(xProps~getPropertyValue(&quot;Visible&quot;) == 0) THEN
    ITERATE
  posY = 3000
  counter = 1
  marked = 0
  /* create the group */
  shapeGroup = xMcf~createInstanceWithContext(-
    &quot;{%see com.sun.star.drawing.ShapeCollection}&quot;, xContext)
  shapeGroup = shapeGroup~{%see com.sun.star.drawing.XShapes%XShapes}

  DO itemId OVER headingIndex
    nextIndex = headingIndex[counter+1]
    IF (countHeadings &lt;&gt; counter) THEN 
    DO
      /* adding the lines between the heading circles till the last guidepost */
      rectangle = xImpressFactory~createInstance(-
        &quot;{%see com.sun.star.drawing.RectangleShape}&quot;) 
      rectangle = rectangle~{%see com.sun.star.drawing.XShape%XShape}
      CALL setSizeAndPosition rectangle, 300, stepY - 1000, 1360, posY + 1300
      rectangleProps=rectangle~{%see com.sun.star.beans.XPropertySet%XPropertySet}
      IF (nextIndex &lt;= i) THEN
	rectangleProps~setPropertyValue(&quot;FillColor&quot;, box(&quot;int&quot;, &quot;FF0000&quot;x ~c2d))
      ELSE 
        rectangleProps~setPropertyValue(&quot;FillColor&quot;,-
          box(&quot;int&quot;, &quot;000000&quot;x ~c2d))
      xDrawPage~add(rectangle)
      shapeGroup~add(rectangle) 
    END

    /* create the circles with the heading serial number */
    point = xImpressFactory~createInstance(-
      &quot;{%see com.sun.star.drawing.EllipseShape}&quot;) 
    point = point~{%see com.sun.star.drawing.XShape%XShape}
    pointProps=point~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    constant = bsf.getConstant(&quot;{%see com.sun.star.drawing.CircleKind}&quot;, &quot;FULL&quot;)
    pointProps~setPropertyValue(&quot;CircleKind&quot;, constant)
    pointProps~setPropertyValue(&quot;FillColor&quot;, box(&quot;int&quot;, &quot;FFFF00&quot;x ~c2d))
    CALL setSizeAndPosition point, 1400, 1400, 800, posY
    xDrawPage~add(point)
    shapeGroup~add(point)      

    /* set the click event to the bookmark of the corresponding heading */
    pointProps~setPropertyValue(&quot;OnClick&quot;, -
      bsf.getConstant(&quot;{%see com.sun.star.presentation.ClickAction}&quot;,&quot;BOOKMARK&quot;))
    pointProps~setPropertyValue(&quot;Bookmark&quot;, itemId)
    point~{%see com.sun.star.text.XText%XText}~setString(counter)
    posY = posY + stepY

    IF(counter &lt;= i &amp; i &lt; nextIndex &amp; marked == 0) THEN
    DO
      pointProps~setPropertyValue(&quot;CharColor&quot;,  box(&quot;int&quot;, &quot;FF0000&quot;x ~c2d))
      marked = 1
    END
    ELSE
      pointProps~setPropertyValue(&quot;CharColor&quot;,  box(&quot;int&quot;, &quot;000000&quot;x ~c2d))
    counter = counter + 1
  END
  xShapeGrouper = xDrawPage~{%see com.sun.star.drawing.XShapeGrouper%XShapeGrouper}
  xShapeGroup = xShapeGrouper~group(shapeGroup)
  name = xShapeGroup~{%see com.sun.star.container.XNamed%XNamed} 
  name~setName(&quot;guidepost_group&quot;) 
END
EXIT 0

/* Returns the number of visible slides */
getNumberOfVisibleSlides :
  USE ARG xDrawPages
  count = 0
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      count = count + 1
  END
return count

getHeadlineDisplayName :
  oDoc = ARG(1)  
  model= oDoc~{%see com.sun.star.frame.XModel%XModel}
  famSupplier = model~{%see com.sun.star.style.XStyleFamiliesSupplier%XStyleFamiliesSupplier}
  families = famSupplier~getStyleFamilies()
  graphs = families~getByName(&quot;graphics&quot;)
  styles = graphs~{%see com.sun.star.container.XNameAccess%XNameAccess}
  titelStyle = styles~getByName(&quot;headline&quot;)
  styleProps = titelStyle~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  RETURN styleProps~getPropertyValue(&quot;DisplayName&quot;)
  
::requires UNO.CLS   -- load UNO support for OpenOffice.org

/* routine for positioning and resizing a shape */
::routine  setSizeAndPosition
  use arg shape, width, height, posX, posY

  shape~setSize(-
    .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;, width, height))
  shape~setPosition(.bsf~new(&quot;{%see com.sun.star.awt.Point}&quot;, posX, posY))	

/* routine for removing selection*/
::routine  removeSelection
  use arg oDoc

  model= oDoc~{%see com.sun.star.frame.XModel%XModel}
  controller = model~getCurrentController()
  selectionController = controller~{%see com.sun.star.view.XSelectionSupplier%XSelectionSupplier}
  selected = selectionController~getSelection()
  selectionController~select(.nil)</listing>
</answer>

<versions>
</versions>

<operating-systems>
</operating-systems>

<changelog>
</changelog>

</snippet>
