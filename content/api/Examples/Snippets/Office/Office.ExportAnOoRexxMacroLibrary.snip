<?xml version="1.0"?>
<!--
$RCSfile: Office.ExportAnOoRexxMacroLibrary.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:27 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Office">

<keywords>
	<keyword>ooRexx</keyword>
	<keyword>library</keyword>
	<keyword>export</keyword>
	<keyword>addon</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Export an ooRexx macro library">How to create an addon out of an ooRexx library?
</question>

<answer>
<p>The macro below, first requests the location of the library and the</p>
<p>destination folder. Next a new addon file is being created by help of the</p>
<p>&quot;Package&quot; service. The &quot;Package&quot; service also provides an</p>
<p>&quot;XSingleServiceFactory&quot; interface to create file and folder objects. To</p>
<p>navigate trough the addon files structure a &quot;XHierarchicalNameAccess&quot;</p>
<p>interface is used. Once the right path object has been retrieved use its</p>
<p>&quot;XNameContainer&quot; interface to add the file objects to the addon file.</p>
<p>To copy the content of a file to the file object use its &quot;XActiveDataSink&quot;</p>
<p>interface and provide the file by opening the file with the</p>
<p>&quot;SimpleFileAccess&quot; service. To make the folder a library, change the</p>
<p>folders &quot;MediaType&quot; property to the apropriate string.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end




-- first we will ask for the foldername name of the library using the folder dialog
x_MultiServiceFactory = x_ComponentContext~getServiceManager()~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
folderpicker = &quot;{%see com.sun.star.ui.dialogs.OfficeFolderPicker}&quot;
s_FolderDialog = x_MultiServiceFactory~createInstance(folderpicker)
x_FolderDialog = s_FolderDialog~{%see com.sun.star.ui.dialogs.XFolderPicker%XFolderPicker}

-- better name for our dialog:
x_FolderDialog~setDescription(&quot;Select User Library to Export&quot;)

-- get Path to user Macros
s_pathsubst = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.util.PathSubstitution}&quot;)
x_stringsubst = s_pathsubst~{%see com.sun.star.util.XStringSubstitution%XStringSubstitution}
usermacropath = x_stringsubst~getSubstituteVariableValue(&quot;$(user)&quot;) || &quot;/Scripts/oorexx&quot;

-- set Directory of Dialog to user macro directory
x_FolderDialog~setDisplayDirectory(usermacropath)

-- start the folder dialog
pathchoosen = x_FolderDialog~execute()
if ( pathchoosen ) then
do
   -- if ok button pressed:
   -- read selected path
   librarypath = x_FolderDialog~getDirectory()

   -- create file access interface to access files
   s_SimpleFileAccess = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.ucb.SimpleFileAccess}&quot;)
   x_SimpleFileAccess = s_SimpleFileAccess~{%see com.sun.star.ucb.XSimpleFileAccess%XSimpleFileAccess}

   -- check if parcel-descriptorfile can be found in library directory
   islibrary = x_SimpleFileAccess~exists(librarypath || &quot;/parcel-descriptor.xml&quot;)

   if (islibrary) then
   do
      -- if parcel deskriptor- file can be found:
      -- use Folder Picker again to get destination folder 
      x_FolderDialog~setDescription(&quot;Select Export destination&quot;)

      if ( x_FolderDialog~execute() ) then
      do
         -- if OK-button pressed:
         -- generate package filename with pathname
         libraryname = getLastFromURL(librarypath)

         savefile = x_FolderDialog~getDirectory() || &quot;/&quot; || libraryname || &quot;.oxt&quot;

         -- if the file already exists, delete it
         delete = SysFileDelete(uno.convertFromURL(savefile))
         if (delete &gt; 2) then
         do
            -- check for file deletion errors (32 = file is blocked by other thread)
            errortext = &quot;File delete error: &quot; || delete || &quot;, accessed by other thread?&quot;
            .bsf.dialog~messageBox(errortext, &quot;ERROR&quot;, &quot;error&quot;)
            exit 0
         end

         -- now create package object
         s_Package = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.packages.Package}&quot;)
         x_PackageInit = s_Package~{%see com.sun.star.lang.XInitialization%XInitialization}

         -- initialize the package
         c_String = .bsf4rexx~Class.class~forName(&quot;java.lang.String&quot;)
         initargs = .bsf~bsf.createArray(c_String, 1)
         initargs[1] = savefile
         x_PackageInit~initialize(initargs)

         -- get access to the directory structure of the zip file
         x_HierarchicalNameAccess = s_Package~{%see com.sun.star.container.XHierarchicalNameAccess%XHierarchicalNameAccess}

         -- get the root item and its containerinterface
         o_RootPackageStream = x_HierarchicalNameAccess~getByHierarchicalName(&quot;&quot;)
         x_RootNameContainer = o_RootPackageStream~{%see com.sun.star.container.XNameContainer%XNameContainer}

         -- now create a factory which is able to create new subdirectories and files
         x_PackageFactory = s_Package~{%see com.sun.star.lang.XSingleServiceFactory%XSingleServiceFactory}

         -- arguments to create a directory
         -- arguments MUST BE OBJECTS not primitive types!
         .bsf~bsf.import(&quot;java.lang.Boolean&quot;, &quot;c_Boolean&quot;)
         dirargs = .bsf~bsf.createArray(.c_Boolean, 1)
         dirargs[1] = .c_Boolean~new(&quot;true&quot;)

         s_PackageFolder = x_PackageFactory~createInstanceWithArguments(dirargs)

         -- insert directory object into package
         x_RootNameContainer~insertByName(libraryname, s_PackageFolder)

         -- go into the new created directory and query a container interface for it
         o_LibraryPackageStream = x_HierarchicalNameAccess~getByHierarchicalName(libraryname)
         x_LibraryNameContainer = o_LibraryPackageStream~{%see com.sun.star.container.XNameContainer%XNameContainer}
         
         -- make this directory an ooRexx script library
         x_LibraryPropertySet = o_LibraryPackageStream~{%see com.sun.star.beans.XPropertySet%XPropertySet}
         scripttype = &quot;application/vnd.sun.star.framework-script;type=ooRexx&quot;
         x_LibraryPropertySet~setPropertyValue(&quot;MediaType&quot;, scripttype)

         -- set arguments to create a file
         fileargs = .bsf~bsf.createArray(.c_Boolean, 1)
         fileargs[1] = .c_Boolean~new(&quot;false&quot;)

         -- get all files within librarypath
         libraryfiles = x_SimpleFileAccess~getFolderContents(librarypath, 0)

         -- go trough all files and add them to the package directory
         libraryfileslength = libraryfiles~items
         do counter = 1 to libraryfileslength

            -- first create a fileobject and get the datasink interface of it
            o_FilePackageStream = x_PackageFactory~createInstanceWithArguments(fileargs)
            x_ActiveDataSink  = o_FilePackageStream~{%see com.sun.star.io.XActiveDataSink%XActiveDataSink}

            -- next open a file and get its inputstream
            x_InputStream = x_SimpleFileAccess~openFileRead(libraryfiles[counter])

            -- tell the datasink where to read the data from
            -- this starts the reading process
            x_ActiveDataSink~SetInputStream(x_InputStream)

            -- now insert the filled file object to the package
            filename = getLastFromURL(libraryfiles[counter])
            x_LibraryNameContainer~insertByName(filename, o_FilePackageStream)

         end

         /*
         Here we write a file directly into the zip file.
         To do so we first create a new subdirectory and enter it.
         Next a pipeobject is created, this allows sending data from
         an outputinterface to an inputinterface. Now we create a
         Textoutputstream and write data in it. Finally we use a
         Datasink object like the one before to read the data and
         store it in the created file.
         */

         s_InfoPackageFolder = x_PackageFactory~createInstanceWithArguments(dirargs)

         x_RootNameContainer~insertByName(&quot;PACKAGEINFO&quot;, s_InfoPackageFolder)

         s_InfoPipe = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.io.Pipe}&quot;)
         x_InfoPipeOutputStream = s_InfoPipe~{%see com.sun.star.io.XOutputStream%XOutputStream}
         x_InfoPipeInputStream = s_InfoPipe~{%see com.sun.star.io.XInputStream%XInputStream}

         textstream = &quot;{%see com.sun.star.io.TextOutputStream}&quot;
         s_InfoTextOutputStream = x_MultiServiceFactory~createInstance(textstream)
         x_InfoActiveDataSource = s_InfoTextOutputStream~{%see com.sun.star.io.XActiveDataSource%XActiveDataSource}
         x_InfoActiveDataSource~setOutputStream(x_InfoPipeOutputStream)
         x_InfoTextOutputStream = s_InfoTextOutputStream~{%see com.sun.star.io.XTextOutputStream%XTextOutputStream}

         -- clear stream
         x_InfoPipeOutputStream~flush()

         crlf = &quot;0d&quot;x || &quot;0a&quot;x
         texttowrite = &apos;This Package was created by ExportLibrary macro by Josef Frysak&apos; || crlf
         texttowrite = texttowrite || &apos;on &apos; || DATE(&quot;L&quot;) || &apos; at &apos; || TIME(&quot;C&quot;)
         x_InfoTextOutputStream~writeString(texttowrite)

         -- write into stream
         x_InfoPipeOutputStream~closeOutput()

         o_InfoPackageStream = x_HierarchicalNameAccess~getByHierarchicalName(&quot;PACKAGEINFO&quot;)
         x_InfoNameContainer = o_InfoPackageStream~{%see com.sun.star.container.XNameContainer%XNameContainer}

         o_InfoFileStream = x_PackageFactory~createInstanceWithArguments(fileargs)
         x_InfoActiveDataSink = o_InfoFileStream~{%see com.sun.star.io.XActiveDataSink%XActiveDataSink}

         x_InfoActiveDataSink~SetInputStream(x_InfoPipeInputStream)
         x_InfoNameContainer~insertByName(&quot;info.txt&quot;, o_InfoFileStream)

         -- if all changes are done, we write the data to the zipfile
         x_ChangesBatch = s_Package~{%see com.sun.star.util.XChangesBatch%XChangesBatch}
         x_ChangesBatch~commitChanges()

      end

   end
   else
   do
      -- a message in case the selected library is not containing
      -- a parcel-descriptor file
      errortext = &quot;Selected Directory is not a Library: no parcel-descriptor found &quot;
      .bsf.dialog~messageBox(errortext, &quot;ERROR&quot;, &quot;error&quot;)
   end
   
end

-- a simple routine to parse the name of the file or the directory name
getLastFromURL:
   use arg url
   return RIGHT(url, LENGTH(url) - LASTPOS(&quot;/&quot;, url))

::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-13">Initial version</change>
</changelog>

</snippet>
