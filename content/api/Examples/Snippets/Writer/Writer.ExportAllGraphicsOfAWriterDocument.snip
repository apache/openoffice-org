<?xml version="1.0"?>
<!--
$RCSfile: Writer.ExportAllGraphicsOfAWriterDocument.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:28 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Writer">

<keywords>
	<keyword>export</keyword>
	<keyword>all</keyword>
	<keyword>graphics</keyword>
	<keyword>graphic</keyword>
	<keyword>writer</keyword>
	<keyword>document</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Export all graphics of a Writer document">How to export all graphics of a Writer document?
</question>

<answer>
<p>First get the doucuments &quot;XTextGraphicObjectsSupplier&quot; interface and</p>
<p>retrieve a list containing the graphical objects stored in this</p>
<p>document. Next create a &quot;GraphicProvider&quot; service to be able to store the</p>
<p>pictures to a file. Now iterate trough the list of graphics and create</p>
<p>a PropertyValue array to determine the type of the graphic file and its</p>
<p>destination. Get the graphic object by reading the &quot;Graphic&quot; property of</p>
<p>the container at the current index. Now use the graphic objects &quot;XGraphic&quot;</p>
<p>with the &quot;GraphicProvider&quot; service to store the picture into the file</p>
<p>described by the PropertyValue array.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end




-- first we create a folder dialog to select the export folder
x_MultiServiceFactory = x_ComponentContext~getServiceManager()~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
folderpicker = &quot;{%see com.sun.star.ui.dialogs.OfficeFolderPicker}&quot;
s_FolderDialog = x_MultiServiceFactory~createInstance(folderpicker)
x_FolderDialog = s_FolderDialog~{%see com.sun.star.ui.dialogs.XFolderPicker%XFolderPicker}

-- change the displayed text
x_FolderDialog~setDescription(&quot;Select Directory to Export Graphics&quot;)

pathchoosen = x_FolderDialog~execute()
if ( pathchoosen ) then
do
   -- if a path was sucessfully choosen read the path
   exportpath = x_FolderDialog~getDirectory()

   /*
   now get a text graphics Supplier interface to access all
   the graphics within our text. The function returns a name access
   container but we will use an indexed access.
   */
   x_TextGraphicObjectsSupplier = x_Document~{%see com.sun.star.text.XTextGraphicObjectsSupplier%XTextGraphicObjectsSupplier}
   x_NameAccess = x_TextGraphicObjectsSupplier~getGraphicObjects()
   x_IndexAccess = x_NameAccess~{%see com.sun.star.container.XIndexAccess%XIndexAccess}

   -- next we create a Graphicprovider service (to write graphic files)
   graphicprovider = &quot;{%see com.sun.star.graphic.GraphicProvider}&quot;
   s_GraphicProvider = x_MultiServiceFactory~createInstance(graphicprovider)
   x_GraphicProvider = s_GraphicProvider~{%see com.sun.star.graphic.XGraphicProvider%XGraphicProvider}

   -- now we iterate trough the text graphic supplier and export all graphics
   arr = uno.CreateArray(.UNO~PROPERTYVALUE, 2)

   amount = x_IndexAccess~getCount()

   do counter = 1 to amount

      -- here we define the type of graphics and the storage path and filename
      arr[1] = uno.createProperty(&quot;MimeType&quot;, &quot;image/jpeg&quot;)
      pictureurl = exportpath || &quot;/&quot; || &quot;picture&quot; || counter || &quot;.jpg&quot;
      arr[2] = uno.createProperty(&quot;URL&quot;, pictureurl)

      -- retrieve the picture object
      o_Picture = x_IndexAccess~getByIndex(counter - 1)

      -- next read the picture data and get a XGraphic interface of it
      x_TextGrapicPropertySet = o_Picture~{%see com.sun.star.beans.XPropertySet%XPropertySet}
      o_Graphic = x_TextGrapicPropertySet~getPropertyValue(&quot;Graphic&quot;)
      x_Graphic = o_Graphic~{%see com.sun.star.graphic.XGraphic%XGraphic}

      -- finally store the picture
      x_GraphicProvider~storeGraphic(x_Graphic, arr)
   end
end

::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-14">Initial version</change>
</changelog>

</snippet>
