<?xml version="1.0"?>
<!--
$RCSfile: Impress.AddProgressBarToEachSlide.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2007/08/13 13:05:15 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Impress">

<keywords>
	<keyword>progress bar</keyword>
	<keyword>progress</keyword>
</keywords>

<authors>
	<author id="" initial="true" email="dominik.gundacker@gmail.com">Dominik Gundacker</author>
</authors>

<question heading="Add progress bar to each slide">How to add a progress bar to each slide of a presentation
</question>

<answer>
<listing>/* Macro, which generates a progress bar at the bottom of each slide */
/* 01_progressbar.rex */
xScriptContext=uno.getScriptContext()  -- get the xScriptContext object
oDoc=xScriptContext~getDocument  -- get the document service (an XModel object)
printable = oDoc~{%see com.sun.star.view.XPrintable%XPrintable}

/* retrieving the important interfaces to get access to the drawpages */
xDrawPagesSupplier=oDoc~{%see com.sun.star.drawing.XDrawPagesSupplier%XDrawPagesSupplier}
xImpressFactory = oDoc~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
xDrawPages = xDrawPagesSupplier~getDrawPages
/* global service manager for shape grouper */
xContext = xScriptContext~getComponentContext
XMcf = xContext~getServiceManager
CALL removeSelection oDoc
/* initialize all variables (height, width, etc.) */

firstDrawPageProps = xDrawPages~getByIndex(0)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}~{%see com.sun.star.beans.XPropertySet%XPropertySet}
width = firstDrawPageProps~getPropertyValue(&quot;Width&quot;)
height = firstDrawPageProps~getPropertyValue(&quot;Height&quot;)
shapeWidthBorder = width - 1000
shapeHeight = 750
shapeX = 500
shapeY = height - 1250

IF pagecount == 1 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has only one slide. &quot;-
    &quot;There is no need for a progressbar!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END
CALL getNumberOfVisibleSlides xDrawPages
pagecount=result
step = trunc((width - 1000) / (pagecount - 1))
pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
currentStatus = step
CALL getFirstVisibleSlide xDrawPages
startIndex = result + 1
DO i = 0 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
  /* remove existing bars, if necessary */
  xShapes = xDrawPage~{%see com.sun.star.drawing.XShapes%XShapes}
  DO j = 0 TO xShapes~getCount - 1
     xShape = xShapes~getByIndex(j)
     IF(xShape~{%see com.sun.star.container.XNamed%XNamed}~getName() == &quot;progressbar_group&quot;) THEN
     DO
        xShapeGroup = xShape~{%see com.sun.star.drawing.XShapeGroup%XShapeGroup}
        xDrawPage~remove(xShapeGroup)
     END
  END
  xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF(xProps~getPropertyValue(&quot;Visible&quot;) == 0 | i &lt; startIndex) THEN
    ITERATE
  /* creating and positioning of border of the bar shape */
  barBorder = xImpressFactory~createInstance(-
    &quot;{%see com.sun.star.drawing.RectangleShape}&quot;) 
  barBorder = barBorder~{%see com.sun.star.drawing.XShape%XShape}
  CALL setSizeAndPosition barBorder, shapeWidthBorder, shapeHeight,-
    shapeX, shapeY
  xDrawPage~add(barBorder)
  barBorderProps=barBorder~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  fillStyles = bsf.wrapStaticFields(&quot;{%see com.sun.star.drawing.FillStyle}&quot;)
  barBorderProps~setPropertyValue(&quot;FillStyle&quot;, fillStyles~none)
  CALL setShadowAndFormat(barBorderProps)

  /* creating and positioning of the statusbar shape */  
  statusBarShape = xImpressFactory~createInstance(-
    &quot;{%see com.sun.star.drawing.RectangleShape}&quot;) 
  statusBarShape = statusBarShape~{%see com.sun.star.drawing.XShape%XShape}
  CALL setSizeAndPosition statusBarShape, currentStatus, shapeHeight,-
    shapeX, shapeY
  currentStatus = currentStatus + step
  xDrawPage~add(statusBarShape)

  /* changing the colors of the filling */
  statusBarShapeProps=statusBarShape~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  statusBarShapeProps~setPropertyValue(&quot;FillStyle&quot;,fillStyles~gradient)
  CALL CreateGradientObject
  statusBarShapeProps~setPropertyValue(&quot;FillGradient&quot;, result)
  statusBarShapeProps~setPropertyValue(&quot;LineStyle&quot;,-
    bsf.getConstant(&quot;{%see com.sun.star.drawing.LineStyle}&quot;, &quot;NONE&quot;))
  CALL setShadowAndFormat(statusBarShapeProps)  
  
  /* create the group */
  shapeGroup = xMcf~createInstanceWithContext(-
    &quot;{%see com.sun.star.drawing.ShapeCollection}&quot;, xContext)
  shapeGroup = shapeGroup~{%see com.sun.star.drawing.XShapes%XShapes}
  shapeGroup~add(barBorder)
  shapeGroup~add(statusBarShape)
  xShapeGrouper = xDrawPage~{%see com.sun.star.drawing.XShapeGrouper%XShapeGrouper}
  xShapeGroup = xShapeGrouper~group(shapeGroup)
  name = xShapeGroup~{%see com.sun.star.container.XNamed%XNamed} 
  name~setName(&quot;progressbar_group&quot;)   
END
EXIT 0
/* Function for creating the GradientObject */
CreateGradientObject :
  gradient = .bsf~new(&quot;{%see com.sun.star.awt.Gradient}&quot;)
  gradient~Style = bsf.getConstant(&quot;{%see com.sun.star.awt.GradientStyle}&quot;, &quot;LINEAR&quot;)
  gradient~StartColor     = 9282303
  gradient~EndColor       = 0
  gradient~Angle          = 120
  gradient~Border         = 0
  gradient~XOffset        = 0
  gradient~YOffset        = 0
  gradient~StartIntensity = 100
  gradient~EndIntensity   = 100
  gradient~StepCount      = 10

  return gradient

/* Returns the number of visible slides */
getNumberOfVisibleSlides :
  USE ARG xDrawPages
  count = 0
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      count = count + 1
  END
return count

/* Returns the index of the first visible slide */
getFirstVisibleSlide :
  USE ARG xDrawPages
  index = -1
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      return i
  END
return index


::requires UNO.CLS   -- load UNO support for OpenOffice.org

/* routine for positioning and resizing a shape */
::routine  setSizeAndPosition
  use arg shape, width, height, posX, posY

  shape~setSize(-
    .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;, width, height))
  shape~setPosition(.bsf~new(&quot;{%see com.sun.star.awt.Point}&quot;, posX, posY))	


/* routine for setting the shadow*/
::routine  setShadowAndFormat
  use arg props

  props~setPropertyValue(&quot;CornerRadius&quot;, box(&quot;int&quot;, 300))
  props~setPropertyValue(&quot;Shadow&quot;, box(&quot;boolean&quot;, .true))
  props~setPropertyValue(&quot;ShadowXDistance&quot;, box(&quot;int&quot;, 150))
  props~setPropertyValue(&quot;ShadowYDistance&quot;, box(&quot;int&quot;, 150))
  
/* routine for removing selection*/
::routine  removeSelection
  use arg oDoc

  model= oDoc~{%see com.sun.star.frame.XModel%XModel}
  controller = model~getCurrentController()
  selectionController = controller~{%see com.sun.star.view.XSelectionSupplier%XSelectionSupplier}
  selected = selectionController~getSelection()
  selectionController~select(.nil)</listing>
</answer>

<versions>
</versions>

<operating-systems>
</operating-systems>

<changelog>
</changelog>

</snippet>
