<?xml version="1.0"?>
<!--
$RCSfile: Impress.AddClockThatDisplaysRemainingSlides.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2007/08/13 13:05:15 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Impress">

<keywords>
	<keyword>clock</keyword>
	<keyword>progress</keyword>
	<keyword>remaining slides</keyword>
</keywords>

<authors>
	<author id="" initial="true" email="dominik.gundacker@gmail.com">Dominik Gundacker</author>
</authors>

<question heading="Add a clock that displays the remaining slides">How to add a clock that displays the remaining slides of a presentation
<p>The clock will turn more red as the progress advances in the presentation</p>
</question>

<answer>
<listing>/* Macro, which generates a clock that counts down to the end of the
   presentation */
/* 04_clock.rex */
xScriptContext=uno.getScriptContext()  -- get the xScriptContext object
oDoc=xScriptContext~getDocument  -- get the document service (an XModel object)
/* retrieving the important interfaces to get access to the drawpages */
xDrawPagesSupplier=oDoc~{%see com.sun.star.drawing.XDrawPagesSupplier%XDrawPagesSupplier}
xImpressFactory = oDoc~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
xDrawPages = xDrawPagesSupplier~getDrawPages
/* global service manager for shape grouper */
xContext = xScriptContext~getComponentContext
XMcf = xContext~getServiceManager
CALL removeSelection oDoc
/* initialize all variables (height, width, etc.) */
firstDrawPageProps = xDrawPages~getByIndex(0)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}~{%see com.sun.star.beans.XPropertySet%XPropertySet}
width = firstDrawPageProps~getPropertyValue(&quot;Width&quot;)
height = firstDrawPageProps~getPropertyValue(&quot;Height&quot;)
bombPositionX = width - 2000
shapeX = 500
shapeY = height - 1250

CALL getNumberOfVisibleSlides xDrawPages
pagecount=result
IF pagecount &lt;= 2 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has less than three slide! &quot;-
    &quot;There is no need for running this macro!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END

step = trunc((36000) / (pagecount - 2))

/* start at 12 o clock */
endAngle = 9000
startAngle = 9000
stopAngle = -27000
/* start with white */
colorValue = 16777215
stepRed = trunc( 255 / (pagecount - 2))
circleKinds = bsf.wrapStaticFields(&quot;{%see com.sun.star.drawing.CircleKind}&quot;)

pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount 
CALL getFirstVisibleSlide xDrawPages
startIndex = result + 1
DO i = 0 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}

  /* remove existing clocks, if necessary */
  xShapes = xDrawPage~{%see com.sun.star.drawing.XShapes%XShapes}
  DO j = 0 TO xShapes~getCount - 1
     xShape = xShapes~getByIndex(j)
     IF(xShape~{%see com.sun.star.container.XNamed%XNamed}~getName() == &quot;clock_group&quot;) THEN
     DO
        xShapeGroup = xShape~{%see com.sun.star.drawing.XShapeGroup%XShapeGroup}
        xDrawPage~remove(xShapeGroup)
     END
  END
  xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF(xProps~getPropertyValue(&quot;Visible&quot;) == 0 | i &lt; startIndex) THEN
    ITERATE
  /* creating background shape of the clock */
  clockBackground = xImpressFactory~createInstance(-
    &quot;{%see com.sun.star.drawing.EllipseShape}&quot;) 
  clockBackground = clockBackground~{%see com.sun.star.drawing.XShape%XShape}
  CALL setSizeAndPosition clockBackground, 1500, 1500,-
    trunc(width / 2) - 750, height - 1800
  clockBackgroundProps=clockBackground~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  clockBackgroundProps~setPropertyValue(&quot;CircleKind&quot;, circleKinds~FULL)
  clockBackgroundProps~setPropertyValue(&quot;FillColor&quot;,-
    box(&quot;int&quot;, &quot;FFFFFF&quot;x ~c2d))
  xDrawPage~add(clockBackground)
  
  clock = xImpressFactory~createInstance(-
    &quot;{%see com.sun.star.drawing.EllipseShape}&quot;) 
  clock = clock~{%see com.sun.star.drawing.XShape%XShape}
  CALL setSizeAndPosition clock, 1500, 1500,-
    trunc(width / 2) - 750, height - 1800
  xDrawPage~add(clock)
  clockProps=clock~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  
  /* create the group */
  shapeGroup = xMcf~createInstanceWithContext(-
    &quot;{%see com.sun.star.drawing.ShapeCollection}&quot;, xContext)
  shapeGroup = shapeGroup~{%see com.sun.star.drawing.XShapes%XShapes}
  shapeGroup~add(clockBackground)
  shapeGroup~add(clock)
  xShapeGrouper = xDrawPage~{%see com.sun.star.drawing.XShapeGrouper%XShapeGrouper}
  xShapeGroup = xShapeGrouper~group(shapeGroup)
  name = xShapeGroup~{%see com.sun.star.container.XNamed%XNamed} 
  name~setName(&quot;clock_group&quot;) 

  IF(startAngle &lt;&gt; stopAngle) THEN
    DO
      /* set the start and the end angle for the section */
      clockProps~setPropertyValue(&quot;CircleKind&quot;, circleKinds~SECTION)
      clockProps~setPropertyValue(&quot;CircleStartAngle&quot;, box(&quot;int&quot;, startAngle))
      clockProps~setPropertyValue(&quot;CircleEndAngle&quot;, box(&quot;int&quot;, endAngle))
      startAngle = startAngle - step
      /* adjust color */
      color = box(&quot;int&quot;, colorValue) 
      colorValue = colorValue - (stepRed * 256) - stepRed
    END
  ELSE 
      color = box(&quot;int&quot;, &quot;FF0000&quot;x ~c2d)
  
  clockProps~setPropertyValue(&quot;FillColor&quot;, color) 
END

EXIT 0

/* Returns the number of visible slides */
getNumberOfVisibleSlides :
  USE ARG xDrawPages
  count = 0
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      count = count + 1
  END
return count

/* Returns the index of the first visible slide */
getFirstVisibleSlide :
  USE ARG xDrawPages
  index = -1
  pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount
  DO i = 0 TO pagecount - 1
    xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
    xProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    IF(xProps~getPropertyValue(&quot;Visible&quot;) == 1) THEN
      return i
  END
return index


::requires UNO.CLS   -- load UNO support for OpenOffice.org

/* routine for positioning and resizing a shape */
::routine  setSizeAndPosition
  use arg shape, width, height, posX, posY

  shape~setSize(-
    .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;, width, height))
  shape~setPosition(.bsf~new(&quot;{%see com.sun.star.awt.Point}&quot;, posX, posY))	
  
/* routine for removing selection*/
::routine  removeSelection
  use arg oDoc

  model= oDoc~{%see com.sun.star.frame.XModel%XModel}
  controller = model~getCurrentController()
  selectionController = controller~{%see com.sun.star.view.XSelectionSupplier%XSelectionSupplier}
  selected = selectionController~getSelection()
  selectionController~select(.nil)</listing>
</answer>

<versions>
</versions>

<operating-systems>
</operating-systems>

<changelog>
</changelog>

</snippet>
