<?xml version="1.0"?>
<!--
$RCSfile: Impress.DoRecurringTasks.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2007/08/13 13:05:15 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Impress">

<keywords>
	<keyword>recurring tasks</keyword>
	<keyword>animations</keyword>
	<keyword>effects</keyword>
	<keyword>end slide</keyword>
</keywords>

<authors>
	<author id="" initial="true" email="dominik.gundacker@gmail.com">Dominik Gundacker</author>
</authors>

<question heading="Do recurring tasks like animations, effects and endslides">How to automate recurring tasks like assigning effects and animations
<p>The user will be asked for each automated task</p>
</question>

<answer>
<listing>/* Macro, which generates different kinds of animations and effects
   the user will be asked for the settings of the presentation */
/* 06_finish_presentation.rex */
/* Exceptionhandling */
SIGNAL ON SYNTAX
xScriptContext=uno.getScriptContext()  -- get the xScriptContext object
oDoc=xScriptContext~getDocument  -- get the document service (an XModel object)
/* retrieving the important interfaces to get access to the drawpages */
xDrawPagesSupplier=oDoc~{%see com.sun.star.drawing.XDrawPagesSupplier%XDrawPagesSupplier}
xImpressFactory = oDoc~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
xDrawPages = xDrawPagesSupplier~getDrawPages

/* check pagecount */
pagecount=xDrawPages~{%see com.sun.star.container.XIndexAccess%XIndexAccess}~getCount 

IF pagecount == 1 THEN
DO
  .bsf.dialog~messageBox(&quot;This presentation has only one slide. &quot;-
    &quot;There is no need for running this macro!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
  EXIT 0
END

/* show message dialog for slide effects */
arrayEffects = .array~of(&quot;NONE&quot;, &quot;RANDOM&quot;, &quot;DISSOLVE&quot;, &quot;CLOCKWISE&quot;, -
 &quot;MOVE_FROM_TOP&quot;, &quot;FADE_FROM_BOTTOM&quot;, &quot;HORIZONTAL_STRIPES&quot;, -
 &quot;SPIRALIN_RIGHT&quot;, &quot;CLOSE_HORIZONTAL&quot;, &quot;ROLL_FROM_TOP&quot;)
effect = .bsf.dialog~inputBox(&quot;Choose the Effect you like to add to &quot;-
  &quot;the slides!&quot;, &quot;Effects&quot;, &quot;question&quot;, , arrayEffects)
IF(effect == .nil) THEN
  EXIT 0
  
/* show message dialog for speed of transition */
IF(effect &lt;&gt; &quot;NONE&quot;) THEN
DO
  arraySpeed = .array~of(&quot;SLOW&quot;, &quot;MEDIUM&quot;, &quot;FAST&quot;)
  speed = .bsf.dialog~inputBox(&quot;Choose the speed of the transition!&quot;,-
    &quot;Effects&quot;, &quot;question&quot;, , arraySpeed)
  IF(speed == .nil) THEN
    EXIT 0
END

/* ask for the duration of the transition */
linebreak = &quot;0d0a&quot;x
DO UNTIL seconds &lt;&gt; &quot;&quot;
  seconds = .bsf.dialog~inputBox(&quot;How long (seconds) should be the &quot;,
    &quot;duration of a slide&quot;||linebreak||&quot;0= manual transition?&quot;,-
    &quot;Question&quot;, &quot;question&quot;)
  if(seconds == .nil) then
    EXIT 0
  /* No input */
  if(seconds == &quot;&quot;) then
      .bsf.dialog~messageBox(&quot;Not a valid number!&quot;, &quot;ERROR&quot;, &quot;error&quot;)
END

shapeAnimation = .bsf.dialog~dialogBox(&quot;Do you want a shape animation?&quot;-
  , &quot;Question&quot;, &quot;question&quot;, &quot;YesNo&quot;)

/* ask for the global shape animation */
IF (shapeAnimation == 0) THEN
DO
  arrayEffects = .array~of(&quot;NONE&quot;, &quot;RANDOM&quot;, &quot;DISSOLVE&quot;, &quot;APPEAR&quot;, -
   &quot;LASER_FROM_LEFT&quot;, &quot;MOVE_TO_BOTTOM&quot;, &quot;STRETCH_FROM_LEFT&quot;, -
   &quot;WAYLINE_FROM_RIGHT&quot;, &quot;ZOOM_OUT&quot;, &quot;VERTICAL_LINES&quot;)
  effectShapes = .bsf.dialog~inputBox(&quot;Choose the Effect you like to add to &quot;-
    &quot;the shapes!&quot;, &quot;Effects&quot;, &quot;question&quot;, , arrayEffects)
  IF(effectShapes == .nil) THEN
    EXIT 0
    
  /* ask for the speed of the transition */
  IF(effectShapes &lt;&gt; &quot;NONE&quot;) THEN
  DO
    arraySpeed = .array~of(&quot;SLOW&quot;, &quot;MEDIUM&quot;, &quot;FAST&quot;)
    speedShape = .bsf.dialog~inputBox(&quot;Choose the speed of the shape &quot;-
      &quot;animation!&quot;, &quot;Effects&quot;, &quot;question&quot;, , arraySpeed)
    IF(speedShape == .nil) THEN
      EXIT 0
  END
END

/* ask for end-slide and autmatic start of the presentation */
addEndSlide = .bsf.dialog~dialogBox(&quot;Should a &apos;Thank you for your attention&apos;&quot;-
  &quot;slide be generated?&quot;, &quot;Question&quot;, &quot;question&quot;, &quot;YesNo&quot;)

runPresentation = .bsf.dialog~dialogbox(&quot;Do you want to start the &quot;-
 &quot;presentation after adding the new slide?&quot;, &quot;Question&quot;, &quot;question&quot;, &quot;YesNo&quot;)

IF (addEndSlide == 0) THEN
  DO
    /* insert a slide at the end of the presentation */
    xDrawPages~insertNewByIndex(pagecount)
    lastPage = xDrawPages~getByIndex(pagecount)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}

    /* create the heading of the last slide */
    textShape = xImpressFactory~createInstance(&quot;{%see com.sun.star.drawing.TextShape}&quot;) 
    textShape = textShape~{%see com.sun.star.drawing.XShape%XShape}
    CALL setSizeAndPosition textShape, 22000, 2200, 2800, 7700
    textProps = textShape~{%see com.sun.star.beans.XPropertySet%XPropertySet}
    lastPage~add(textShape)
    textProps~setPropertyValue(&quot;TextFitToSize&quot;,-
      bsf.getConstant(&quot;{%see com.sun.star.drawing.TextFitToSizeType}&quot;,&quot;PROPORTIONAL&quot;))
    textShape~{%see com.sun.star.text.XText%XText}~setString(&quot;Thank you for your attention!&quot;)
  END

/* go through each slide */
DO i = 0 TO pagecount - 1
  xDrawPage = xDrawPages~getByIndex(i)~{%see com.sun.star.drawing.XDrawPage%XDrawPage}
  xShapes = xDrawPage~{%see com.sun.star.drawing.XShapes%XShapes}
/* go over each shape if wanted */
  IF(shapeAnimation == 0) THEN
    DO j = 0 TO xShapes~getCount - 1
       xShape = xShapes~getByIndex(j)
       xShapeProps = xShape~{%see com.sun.star.beans.XPropertySet%XPropertySet}
       /* assigning effects, etc. */
       xShapeProps~setPropertyValue(&quot;Effect&quot;,-
         bsf.getConstant(&quot;{%see com.sun.star.presentation.AnimationEffect}&quot;,-
         effectShapes))
       IF(speedShape &lt;&gt; &quot;SPEEDSHAPE&quot;) THEN
       xShapeProps~setPropertyValue(&quot;Speed&quot;,-
         bsf.getConstant(&quot;{%see com.sun.star.presentation.AnimationSpeed}&quot;,-
         speedShape))
    END
  xDrawPageProps = xDrawPage~{%see com.sun.star.beans.XPropertySet%XPropertySet}
  IF (seconds == 0) THEN
    value = 0
  ELSE
    value = 1
  /* assigning effects, etc. */
  xDrawPageProps~setPropertyValue(&quot;Change&quot;, box(&quot;int&quot;, value))
  xDrawPageProps~setPropertyValue(&quot;Duration&quot;, box(&quot;int&quot;, seconds))
  xDrawPageProps~setPropertyValue(&quot;Effect&quot;, -
    bsf.getConstant(&quot;{%see com.sun.star.presentation.FadeEffect}&quot;, effect))
  IF(speed &lt;&gt; &quot;SPEED&quot;) THEN
    xDrawPageProps~setPropertyValue(&quot;Speed&quot;, -
      bsf.getConstant(&quot;{%see com.sun.star.presentation.AnimationSpeed}&quot;, speed))
END

/* starting the presentation */
if(runPresentation == 0) THEN
  DO
    xPresentation = oDoc~{%see com.sun.star.presentation.XPresentationSupplier%XPresentationSupplier}~getPresentation
    xPresentation~bsf.invoke(&quot;start&quot;)
  END

EXIT 0
SYNTAX:
   .bsf.dialog~messageBox(&quot;Error in line &quot; SIGL &quot;. Please check your input!&quot;,-
     &quot;ERROR&quot;, &quot;error&quot;)

::requires UNO.CLS   -- load UNO support for OpenOffice.org

/* routine for positioning and resizing a shape */
::routine  setSizeAndPosition
  use arg shape, width, height, posX, posY

  shape~setSize(-
    .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;, width, height))
  shape~setPosition(.bsf~new(&quot;com.sun.star.awt.Point&quot;, posX, posY))	</listing>
</answer>

<versions>
</versions>

<operating-systems>
</operating-systems>

<changelog>
</changelog>

</snippet>
