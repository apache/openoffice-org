<?xml version="1.0"?>
<!--
$RCSfile: Office.RunAMacro.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:27 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Office">

<keywords>
	<keyword>run</keyword>
	<keyword>execute</keyword>
	<keyword>invoke</keyword>
	<keyword>macro</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Run a macro">How to run a macro out of another macro?
</question>

<answer>
<p>The &quot;DispatchHelper&quot; service is capable of calling other macros registered</p>
<p>in Open Office. Use the &quot;XDispatchProvider&quot; interface of the Desktop as</p>
<p>environment for the call.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<p>WARNING: The example code contains 3 scripts, which need to be stored as</p>
<p>different macros!</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
-- invoked by OOo as a macro
-- get context
x_ComponentContext = x_ScriptContext~getComponentContext
-- get desktop (an XDesktop)
x_Desktop = x_ScriptContext~getDesktop
-- get current document
x_Document = x_ScriptContext~getDocument
end
else
do
-- called from outside of OOo, create a connection
-- connect to Open Office and get component context
x_ComponentContext = UNO.connect()
-- create a desktop service and its interface
service = &quot;{%see com.sun.star.frame.Desktop}&quot;
s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
-- get the last active document
x_Document = x_Desktop~getCurrentComponent()
end
-- this macro just works externally, called by rexxj or rexx
-- create DispatchHelper service and query its interface
x_MultiServiceFactory = x_ComponentContext~getServiceManager()~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
s_DispatchHelper = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.frame.DispatchHelper}&quot;)
x_DispatchHelper = s_DispatchHelper~{%see com.sun.star.frame.XDispatchHelper%XDispatchHelper}
-- get dispatch provider interface of current Desktop
x_DispatchProvider = x_Desktop~{%see com.sun.star.frame.XDispatchProvider%XDispatchProvider}
-- define ooRexx dispatch target
MacroURL = &quot;vnd.sun.star.script:BakkMacros.x_Sample.rex?language=ooRexx&amp;location=user&quot;
-- prepare parameters
parameters = uno.CreateArray(.UNO~PROPERTYVALUE, 2)
-- traget script ignores argument names, use any name you want
parameters[1] = uno.createProperty(&quot;arg1&quot;, 5)
parameters[2] = uno.createProperty(&quot;arg2&quot;, 2)
-- make dispatch call
-- ATTENTION! do not use .nil here, instead use .uno~noProps if no parameters submitted !!!
-- i.e: x_DispatchHelper~executeDispatch(x_DispatchProvider, MacroURL, &quot;&quot;, 0, .uno~noProps)
r = x_DispatchHelper~executeDispatch(x_DispatchProvider, MacroURL, &quot;&quot;, 0, parameters)
.bsf.dialog~messageBox(&quot;Result of x_Sample.rex: &quot; || r~result, &quot;IT Works&quot;, &quot;information&quot;)
-- define Star Basic dispatch target
MacroURL = &quot;vnd.sun.star.script:BakkMacros.x_Sample.addition?language=Basic&amp;location=application&quot;
-- r = x_DispatchHelper~executeDispatch(x_DispatchProvider, MacroURL, &quot;&quot;, 0, .uno~noProps)
r = x_DispatchHelper~executeDispatch(x_DispatchProvider, MacroURL, &quot;&quot;, 0, parameters)
.bsf.dialog~messageBox(&quot;Result of x_Sample.addition (Star Basic Macro): &quot; || r~result, -
&quot;IT Works&quot;, &quot;information&quot;)
::requires UNO.CLS



The called ooRexx macro (x_Sample.rex):

-- a small test macro to test the x_RunMacro.rex macro
info = &quot;Adding: &quot; || ARG(1) || &quot; + &quot; || ARG(2) || &quot; using ooRexx&quot;
.bsf.dialog~messageBox(info, &quot;IT Works&quot;, &quot;information&quot;)
return (ARG(1) + ARG(2))
::requires BSF.CLS



The called Basic macro (Store to
&quot;My Macros&quot;, Library name: &quot;BakkMacros&quot;, Module: &quot;x_Sample&quot;):

REM ***** BASIC *****
Sub Main
RunMacro
End Sub
Function addition(arg1, arg2 as Integer) as Integer
&apos; view that we are currently using Star Basic
MsgBox(&quot;Adding: &quot; &amp; arg1 &amp; &quot; + &quot; &amp; arg2 &amp; &quot; using Star Basic&quot;, 64, &quot;IT Works&quot;)
&apos; return calculation
&apos; to calculate make sure the parameters are Integers
addition = CInt(arg1) + CInt(arg2)
End Function
Sub RunMacro
&apos; create the Dispatcher service
oDisp = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
Automating Open Office â€“ ooRexx Nutshells Page 29
&apos; prepare parameters as array
Dim a(1) As New com.sun.star.beans.PropertyValue
a(0).Name = &quot;arg1&quot; : a(0).Value = 7
a(1).Name = &quot;arg2&quot; : a(1).Value = 1
&apos; macro URL to addition function above
sMacroURL = &quot;vnd.sun.star.script:BakkMacros.x_Sample.addition?language=Basic&amp;location=application&quot;
&apos; call addition function
r = oDisp.executeDispatch(StarDesktop, sMacroURL, &quot;&quot;, 0, a())
&apos; view result
MsgBox(&quot;Result of x_Sample.addition: &quot; &amp; r.result, 64, &quot;IT Works&quot;)
&apos; macro URL to x_Sample.rex
sMacroURL = &quot;vnd.sun.star.script:BakkMacros.x_Sample.rex?language=ooRexx&amp;location=user&quot;
&apos; call x_Sample.rex and use the same parameters again
r = oDisp.executeDispatch(StarDesktop, sMacroURL, &quot;&quot;, 0, a())
&apos; show result
MsgBox(&quot;Result of x_Sample.addition: &quot; &amp; r.result, 64, &quot;IT Works&quot;)
End Sub</listing>
</answer>

<versions>
	<version number="2.4.1" status="may work"/>
</versions>

<operating-systems>
<operating-system name="Linux"/>
<operating-system name="Win32"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-12">Initial version</change>
</changelog>

</snippet>
