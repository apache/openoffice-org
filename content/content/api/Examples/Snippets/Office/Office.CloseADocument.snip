<?xml version="1.0"?>
<!--
$RCSfile: Office.CloseADocument.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:27 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Office">

<keywords>
	<keyword>close</keyword>
	<keyword>document</keyword>
	<keyword>uno</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Close a document">How to close a document?
</question>

<answer>
<p>First check if the document has been changed since last save by using the</p>
<p>&quot;XModifiable&quot; interface. If it has been changed use the &quot;XStorable&quot;</p>
<p>interface to save it before closing the document.</p>
<p>To close a document there are 3 ways to do so: The &quot;close&quot; method of the</p>
<p>&quot;XClosable&quot; interface, the &quot;dispose&quot; function of the &quot;XComponent&quot; interface</p>
<p>and the &quot;terminate&quot; method of the &quot;XDesktop&quot; interface. The best way to</p>
<p>close a document is to use the &quot;close&quot; method.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end



-- create outputtext
output = &quot;Document &quot;

-- check if doucument has been changed
x_Modifiable = x_Document~{%see com.sun.star.util.XModifiable%XModifiable}
x_Storable = x_Document~{%see com.sun.star.frame.XStorable%XStorable}

If (x_Modifiable~isModified()) Then
do
   output = output || &quot;was Modified, &quot;

   /*
   if there is allready a file containing the document
   then save into this file, else just set modify flag to false
   (do not save file)
   */

   If (x_Storable~hasLocation &amp; (\ x_Storable~isReadOnly)) Then
   do
      x_Storable~store()
      output = output || &quot;and has been stored - &quot;
   end
   else
   do
      x_Modifiable~setModified(.false)
      output = output || &quot;and has NOT been stored - &quot;
   end
end
else
do
   output = output || &quot;was NOT Modified - &quot;
end

/*
next check for different methods to shut down
if we are able to create a XModel interface then also try to query a XClosable 
interface to close document. If XCloseable interface is not available, use
Documents dispose method to close the document. If XModel interface query fails,
terminate the frame to shut down.
*/

-- x_ServiceInfo = x_Document~{%see com.sun.star.lang.XServiceInfo%XServiceInfo}
-- If x_ServiceInfo~supportsService(&quot;{%see com.sun.star.frame.XModel}&quot;) then
-- I dont know why, but this does not work properly, therefore

x_Model = x_Document~{%see com.sun.star.frame.XModel%XModel}

if x_Model &lt;&gt; .nil then
do
   x_Closeable = x_Document~{%see com.sun.star.util.XCloseable%XCloseable}

   If x_Closeable &lt;&gt; .nil then
   do
      x_Closeable~close(.true)
      output = output || &quot;closed by XClosable Interface (SOFTEST WAY)&quot;
   end
   else
   do
      x_Document~dispose()
      output = output || &quot;closed by XDocument Interface (SOFT WAY)&quot;
   end

end
else
do
   x_Desktop~terminate()
   output = output || &quot;closed by XDesktop Interface (HARD WAY)&quot;
end

-- finaly show message what happened
.bsf.dialog~messageBox(output, &quot;Closing Document...&quot;, &quot;information&quot;)

::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-13">Initial version</change>
</changelog>

</snippet>
