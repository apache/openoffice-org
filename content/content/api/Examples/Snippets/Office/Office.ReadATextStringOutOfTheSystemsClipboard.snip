<?xml version="1.0"?>
<!--
$RCSfile: Office.ReadATextStringOutOfTheSystemsClipboard.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:27 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Office">

<keywords>
	<keyword>read</keyword>
	<keyword>text</keyword>
	<keyword>string</keyword>
	<keyword>system</keyword>
	<keyword>systems</keyword>
	<keyword>clipboard</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Read a text string out of the systems clipboard">How to read a string out of the systems clipboard?
</question>

<answer>
<p>Create an instance of the &quot;SystemClipboard&quot; service and its</p>
<p>&quot;XSystemClipboard&quot; interface. Next check the clipboard for a valid text</p>
<p>entry by searching the list of all supported data types. If the content</p>
<p>is a text string convert it to a simple string using the &quot;Converter&quot;</p>
<p>service.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end




-- this is the text we want to write
cliptext = &quot;&quot;

-- create the clipboard service controlling the clipboard of
-- the operating system
x_MultiServiceFactory = x_ComponentContext~getServiceManager()~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
clipboard = &quot;{%see com.sun.star.datatransfer.clipboard.SystemClipboard}&quot;
s_Clipboard = x_MultiServiceFactory~createInstance(clipboard)
x_Clipboard = s_Clipboard~{%see com.sun.star.datatransfer.clipboard.XClipboard%XClipboard}

-- get the clipboard content
x_Transferable = x_Clipboard~getContents()

/*
check if the clipboard object contains text information:
get a list of all supported data types
and search for a valid entry (utf-16)
*/

flavorslist = x_Transferable~getTransferDataFlavors()
flavorslistlength = bsf(&apos;arrayLength&apos;, flavorslist)
counter = 1
found = false;
do while (counter &lt;= flavorslistlength) &amp; (found = false)
  found = (flavorslist[counter]~bsf.getFieldValue(&quot;MimeType&quot;) = &quot;text/plain;charset=utf-16&quot;)
  counter = counter + 1
end

-- if it contains a valid entry:
if found then
do
  counter = counter - 1
  -- create a data type converter service
  s_Converter = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.script.Converter}&quot;)
  x_TypeConverter = s_Converter~{%see com.sun.star.script.XTypeConverter%XTypeConverter}

  -- transform data (into simple text)
  content = x_Transferable~getTransferData(flavorslist[counter])

  -- read clipboard as string
  stringtype = bsf.getConstant(&quot;{%see com.sun.star.uno.TypeClass}&quot;, &quot;STRING&quot;)  
  cliptext = x_TypeConverter~convertToSimpleType(content, stringtype)

end

-- add the current date to the previously recieved text
cliptext = cliptext || DATE(&quot;E&quot;,,,&quot;.&quot;)

-- and write down this information at the current textcursor position
x_TextDocument = x_Document~{%see com.sun.star.text.XTextDocument%XTextDocument}
x_Text = x_TextDocument~getText

s_CurrentController = x_TextDocument~getCurrentController()
x_TextViewCursorSupplier = s_CurrentController~{%see com.sun.star.text.XTextViewCursorSupplier%XTextViewCursorSupplier}
x_CurrentCursor = x_TextViewCursorSupplier~getViewCursor()

x_TextCursor = x_Text~createTextCursorByRange(x_CurrentCursor~getStart())

x_SimpleText = x_Text~{%see com.sun.star.text.XSimpleText%XSimpleText}
x_SimpleText~insertString(x_TextCursor, cliptext, .false)

::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="Win32"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-13">Initial version</change>
</changelog>

</snippet>
