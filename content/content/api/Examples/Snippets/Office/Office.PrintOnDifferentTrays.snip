<?xml version="1.0"?>
<!--
$RCSfile: Office.PrintOnDifferentTrays.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2006/04/25 11:20:45 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="Java" application="Office">

<keywords>
	<keyword>print</keyword>
	<keyword>printer</keyword>
	<keyword>tray</keyword>
</keywords>

<authors>
	<author id="tobiaskrais" initial="false" email="tuxmail-spam@bats.ch" copyright="Copy it, use it.">Tobias Krais</author>
</authors>

<question heading="Print on different Trays">How to print on different trays?
</question>

<answer>
<listing>import com.sun.star.beans.PropertyValue;
import com.sun.star.beans.XPropertySet;
import com.sun.star.container.XNameAccess;
import com.sun.star.container.XNameContainer;
import com.sun.star.style.XStyle;
import com.sun.star.style.XStyleFamiliesSupplier;
import com.sun.star.text.XText;
import com.sun.star.text.XTextCursor;
import com.sun.star.text.XTextDocument;
import com.sun.star.uno.UnoRuntime;
import com.sun.star.view.PrintableState;
import com.sun.star.view.XPrintJobBroadcaster;
import com.sun.star.view.XPrintable;

/**
* Conditions: XComponent openDocument;
* {%internal ../Office/Office.OpenDocumentFromURL.snip}
*/

    /**
     * This method prints the global defined XComponent in this class.
     * It takes the name of the printer (the name must have the same value as
     * shown in the OpenOffice printer dialog).
     * It also takes the tray of the printer (the name must have the same value
     * as shown in the OpenOffice printer dialog).
     * It takes the page numbers you want to print. It must again be the same
     * value as you use in the OpenOffice printer dialog, e.g &quot;1&quot; for page
     * number 1 or &quot;2-&quot; for page 2 and following.
     * 
     * @param printerName
     * @param printerTray
     * @param pages
     */
    public void printDocument(String printerName,
            String printerTray,
            String pages)
    {
        try {
            
            // Querying for the interface XPrintable on the loaded document
            XPrintable xPrintable = (XPrintable)
                    UnoRuntime.queryInterface(XPrintable.class, openDocument);
            
            XPrintJobBroadcaster selection = (XPrintJobBroadcaster)
                    UnoRuntime.queryInterface(XPrintJobBroadcaster.class,
                    xPrintable);
            
            MyXPrintJobListener myXPrintJobListener = new MyXPrintJobListener();
            selection.addPrintJobListener(myXPrintJobListener);
            // Setting the property &quot;Name&quot; for the favoured printer
            PropertyValue[] printerDesc = new PropertyValue[1];
            printerDesc[0] = new PropertyValue();
            printerDesc[0].Name = &quot;Name&quot;;
            printerDesc[0].Value = printerName;
            
            // Setting the name of the printer
            xPrintable.setPrinter(printerDesc);
            
            // Setting the property &quot;Pages&quot; so that only the desired pages
            // will be printed.
            PropertyValue[] printOpts = new PropertyValue[1];
            printOpts[0] = new PropertyValue();
            printOpts[0].Name = &quot;Pages&quot;;
            printOpts[0].Value = pages;
            
            XTextDocument xTextDocument = (XTextDocument)
                    UnoRuntime.queryInterface(XTextDocument.class,
                            openDocument);
            
            XText xText = xTextDocument.getText();
            /* Manipulate the text .. basically add the text */
            
            // create a text cursor from the cells XText interface
            XTextCursor xTextCursor = xText.createTextCursor();
            // Get the property set of the cell&apos;s TextCursor
            XPropertySet xTextCursorProps = (XPropertySet)
                    UnoRuntime.queryInterface(XPropertySet.class, xTextCursor);
            
            String pageStyleName = 
                    xTextCursorProps.getPropertyValue(&quot;PageStyleName&quot;).toString();
            
            // Get the StyleFamiliesSupplier interface of the document
            XStyleFamiliesSupplier xSupplier = (XStyleFamiliesSupplier)
                    UnoRuntime.queryInterface(XStyleFamiliesSupplier.class,
                            xTextDocument);
            // Use the StyleFamiliesSupplier interface to get the XNameAccess
            // interface of the actual style families
            XNameAccess xFamilies = (XNameAccess)
                    UnoRuntime.queryInterface(XNameAccess.class,
                            xSupplier.getStyleFamilies());
            // Access the &apos;PageStyles&apos; Family
            XNameContainer xFamily = (XNameContainer)
                    UnoRuntime.queryInterface(XNameContainer.class,
                            xFamilies.getByName(&quot;PageStyles&quot;));
            
            XStyle xStyle = (XStyle)
                    UnoRuntime.queryInterface(XStyle.class,
                            xFamily.getByName(pageStyleName));
            // Get the property set of the cell&apos;s TextCursor
            XPropertySet xStyleProps = (XPropertySet)
                    UnoRuntime.queryInterface(XPropertySet.class, xStyle);
            // my PageStyleSetting ...
            xStyleProps.setPropertyValue(&quot;PrinterPaperTray&quot;, printerTray);
            
            System.out.println(&quot;PrinterPaperTray:&quot; +
                    xStyleProps.getPropertyValue(&quot;PrinterPaperTray&quot;));
            
            xPrintable.print(printOpts);
            
            while (myXPrintJobListener.getStatus() == null || 
                    myXPrintJobListener.getStatus() == PrintableState.JOB_STARTED)
            {
                Thread.sleep(100);
            }
        }
        catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

/**
* And here the mentioned MyXPrintJobListener.
*/
package de.twc.oocom.components;

import com.sun.star.view.PrintJobEvent;
import com.sun.star.view.PrintableState;
import com.sun.star.view.XPrintJobListener;

public class MyXPrintJobListener implements XPrintJobListener {
    private PrintableState status = null;
    public PrintableState getStatus() {
        return status;
    }
    
    public void setStatus(PrintableState status) {
        this.status = status;
    }
    
    /**
     * The print job event: has to be called when the action is triggered.
     */
    public void printJobEvent(PrintJobEvent printJobEvent) {
        if(printJobEvent.State == PrintableState.JOB_COMPLETED)
        {
            System.out.println(&quot;JOB_COMPLETED&quot;);
            this.setStatus(PrintableState.JOB_COMPLETED);
        }
        if(printJobEvent.State == PrintableState.JOB_ABORTED)
        {
            System.out.println(&quot;JOB_ABORTED&quot;);
            this.setStatus(PrintableState.JOB_ABORTED);
        }
        if(printJobEvent.State == PrintableState.JOB_FAILED)
        {
            System.out.println(&quot;JOB_FAILED&quot;);
            this.setStatus(PrintableState.JOB_FAILED);
            return;
        }
        if(printJobEvent.State == PrintableState.JOB_SPOOLED)
        {
            System.out.println(&quot;JOB_SPOOLED&quot;);
            this.setStatus(PrintableState.JOB_SPOOLED);
        }
        if(printJobEvent.State == PrintableState.JOB_SPOOLING_FAILED)
        {
            System.out.println(&quot;JOB_SPOOLING_FAILED&quot;);
            this.setStatus(PrintableState.JOB_SPOOLING_FAILED);
            return;
        }
        if(printJobEvent.State == PrintableState.JOB_STARTED)
        {
            System.out.println(&quot;JOB_STARTED&quot;);
            this.setStatus(PrintableState.JOB_STARTED);
            return;
        }
    }
    
    /**
     * Disposing event: ignore.
     */
    public void disposing(com.sun.star.lang.EventObject eventObject) {
        System.out.println(&quot;disposing&quot;);
    }
}</listing>
</answer>

<versions>
	<version number="2.0.x" status="tested"/>
	<version number="2.0.x" status="can not work"/>
</versions>

<operating-systems>
<operating-system name="Linux"/>
</operating-systems>

<changelog>
	<change author-id="tobiaskrais" date="2006-03-30">Initial version</change>
</changelog>

</snippet>

