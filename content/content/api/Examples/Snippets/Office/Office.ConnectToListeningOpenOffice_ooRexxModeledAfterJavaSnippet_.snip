<?xml version="1.0"?>
<!--
$RCSfile: Office.ConnectToListeningOpenOffice_ooRexxModeledAfterJavaSnippet_.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2006/08/03 05:25:36 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Office">

<keywords>
	<keyword>bootstrap</keyword>
	<keyword>connect</keyword>
</keywords>

<authors>
	<author id="RGF" initial="false" email="">Rony G. Flatscher</author>
</authors>

<question heading="Connect to Listening OpenOffice (ooRexx modeled after Java snippet)">How to connect to a already listening OpenOffice?

<p>You can start a OpenOffice in listening mode with e.g. this command:</p>
<p></p>
<p>   soffice -accept=&quot;socket,host=localhost,port=9000;urp;StarOffice.ServiceManager&quot;</p>
<p></p>
<p>This commandline starts OpenOffice listening on port 9000</p>
<p></p>
</question>

<answer>
<p>This public routine connects to a listening OpenOffice and makes the most important</p>
<p>   objects available via the environment directory &quot;.local&quot;.</p>
<p>   Modelled after {%internal ./Office.ConnectToListeningOpenOffice.snip}.</p>
<listing>

   /* Directives are led in by two &quot;::&quot; and are carried out by the ooRexx ({%external http://www.ooRexx.org})
      interpreter, before the program starts. Hence all public classes and routines defined
      via directives are available upon execution of the ooRexx program.   */

::requires UNO.CLS   /* get special UNO ooRexx support, which itself calls the module BSF.CLS,
                        thereby establishing full access to Java using BSF4Rexx     */


 /**
  * This public routine connects to a running OpenOffice. This OpenOffice is
  * listening on a specific port. It connects to this port.
  *
  * @param ooport
  * @return
  */

::routine connectListeningOpenOffice public
   parse arg ooport

      -- Create an OO Component Context
   xRemoteContext = .uno~Bootstrap~createInitialComponentContext(.nil)

      -- create a connector, so that it can contact the office
   urlResolver = uno.loadClass(&quot;{%see com.sun.star.bridge.UnoUrlResolver}&quot;)~create(xRemoteContext);

   initialObject = urlResolver~resolve(&quot;uno:socket,host=localhost,port=&quot;ooport&quot;;urp;StarOffice.ServiceManager&quot;)
   xRemoteServiceManager = initialObject~{%see com.sun.star.lang.XMultiComponentFactory%XMultiComponentFactory}

      -- retrieve the component context as property (it is not yet
      -- exported from the office). Query for the XPropertySet interface.
   xProperySet = xRemoteServiceManager~{%see com.sun.star.beans.XPropertySet%XPropertySet}

      -- Get the default context from the office server.
   oDefaultContext = xProperySet~getPropertyValue(&quot;DefaultContext&quot;);

      -- Query for the interface XComponentContext.
   xRemoteContext = oDefaultContext~{%see com.sun.star.uno.XComponentContext%XComponentContext}

      -- now create the desktop service
      -- NOTE: use the office component context here!
   desktop = xRemoteServiceManager~createInstanceWithContext(&quot;{%see com.sun.star.frame.Desktop}&quot;, xRemoteContext)

      --  You will need these Objects often, so define them global...
   /* Make the following objects globally available via the ooRexx environment directory &quot;.local&quot;.
      Each entry there is available as environment symbol (an ooRexx symbol starting with a dot).
   */
   .local~desktop              = desktop                 -- available as &quot;.desktop&quot;
   .local~xRemoteContext       = xRemoteContext          -- available as &quot;.xRemoteContext&quot;
   .local~xRemoteServiceManager= xRemoteServiceManager   -- available as &quot;.xRemoteServiceManager&quot;
   return

any:
   say &quot;No OpenOffice is listening. Cannot connect.&quot;

</listing>
</answer>

<versions>
	<version number="2.0.x" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="RGF" date="2006-07-20">Initial version</change>
</changelog>

</snippet>
