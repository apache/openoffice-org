<?xml version="1.0"?>
<!--
$RCSfile: Calc.ImportAGraphicFile.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:26 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->


<snippet language="ooRexx" application="Calc">

<keywords>
	<keyword>graphic</keyword>
	<keyword>import</keyword>
	<keyword>insert</keyword>
	<keyword>spreadsheet</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Import a graphic file">How to import a graphic file into a spreadsheet?
</question>

<answer>
<p>First a &quot;FilePicker&quot; dialog is used to ask the user for the location of the</p>
<p>graphic file. Then a new &quot;GrpahicObjectShape&quot; Object is created by a </p>
<p>&quot;XMultiServiceFactory&quot; and the url to the graphic file is stored in its</p>
<p>&quot;GraphicURL&quot; property. Finally this graphic object is stored to the</p>
<p>&quot;DrawPage&quot; of the spreadsheet.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end




-- first we need a file dialog to select a file to import
x_MultiServiceFactory = x_ComponentContext~getServiceManager()~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
s_FileDialog = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.ui.dialogs.OfficeFilePicker}&quot;)
x_FileDialog = s_FileDialog~{%see com.sun.star.ui.dialogs.XFilePicker%XFilePicker}
x_FileDialogFilters = s_FileDialog~{%see com.sun.star.ui.dialogs.XFilterManager%XFilterManager}

-- adding some file extensions
x_FileDialogFilters~appendFilter(&quot;All *.*&quot;, &quot;*.*&quot;)

-- Better name for our dialog:
x_FileDialog~setTitle(&quot;Select Graphic File&quot;)

-- selecting more than one file at once dissalowed (to allow it use 1)
x_FileDialog~setMultiSelectionMode(0)

filechoosen = x_FileDialog~execute()
if ( filechoosen ) then
do
   -- if a file has been choosen:
   -- read filename
   files = x_FileDialog~getFiles()
   file = files[1]

   -- now get the currently slected sheet
   x_Model = x_Document~{%see com.sun.star.frame.XModel%XModel}
   s_CurrentController = x_Model~getCurrentController()
   x_View = s_CurrentController~{%see com.sun.star.sheet.XSpreadsheetView%XSpreadsheetView}
   x_Spreadsheet = x_View~getActiveSheet()

   -- and the drawing interface from this sheet
   x_DrawPageSupplier = x_Spreadsheet~{%see com.sun.star.drawing.XDrawPageSupplier%XDrawPageSupplier}
   x_DrawPage = x_DrawPageSupplier~getDrawPage()

   -- next create a Graphics object (a Shape)
   x_MultiServiceFactory = x_Document~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
   s_Shape = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.drawing.GraphicObjectShape}&quot;)
   shapeProperties = s_Shape~{%see com.sun.star.beans.XPropertySet%XPropertySet}

   -- and enter the filename to the link --&gt; JUST A LINKED GRAPHIC!
   shapeProperties~setPropertyValue(&quot;GraphicURL&quot;, file)

   -- enlarge and reposition the graphical object
   size = .bsf~new(&quot;{%see com.sun.star.awt.Size}&quot;)
   size~bsf.setFieldValue(&quot;width&quot;, 5535)
   size~bsf.setFieldValue(&quot;height&quot;, 5535)

   pos = .bsf~new(&quot;{%see com.sun.star.awt.Point}&quot;)
   pos~bsf.setFieldValue(&quot;X&quot;, 400)
   pos~bsf.setFieldValue(&quot;Y&quot;, 400)

   x_Shape = s_Shape~{%see com.sun.star.drawing.XShape%XShape}
   x_Shape~setSize(size)
   x_Shape~setPosition(pos)

   -- finally add the graphics object to the sheet
   x_DrawPage~add(x_Shape)
end


::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-12">Initial version</change>
</changelog>

</snippet>
