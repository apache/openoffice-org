<?xml version="1.0"?>
<!--
$RCSfile: Calc.ChangeATextCellToACellWithURLObject.snip,v $
last change: $Revision: 1.1 $ $Author: tomsontom $ $Date: 2008/10/20 11:29:26 $

(c)2003 by the copyright holders listed with the author-tags.
If no explicit copyright holder is mentioned with a certain author,
the author him-/herself is the copyright holder. All rights reserved.

Public Documentation License Notice:

The contents of this Documentation are subject to the
Public Documentation License Version 1.0 (the "License");
you may only use this Documentation if you comply with
the terms of this License. A copy of the License is
available at http://www.openoffice.org/licenses/PDL.html

The Original Documentation can be found in the CVS archives
of openoffice.org at the place specified by RCSfile: in this header.

The Initial Writer(s) of the Original Documentation are listed
with the author-tags below.

The Contributor(s) are listed with the author-tags below
without the marker for being an initial author.

All Rights Reserved.
-->

<snippet language="ooRexx" application="Calc">

<keywords>
	<keyword>insert</keyword>
	<keyword>replace</keyword>
	<keyword>URL</keyword>
	<keyword>content</keyword>
	<keyword>cell</keyword>
</keywords>

<authors>
	<author id="1" initial="true" email="" copyright="Josef Frysak">Josef Frysak</author>
</authors>

<question heading="Change a text cell to a cell with URL object">How to insert an URL to a cell?
</question>

<answer>
<p>First only one selected cell must be retrieved. Therefore store the old</p>
<p>selection into a variable, then create a new cell cursor out of the current</p>
<p>selection and then restore the old selection. Now create a new &quot;URL&quot; object</p>
<p>and insert it as text content of the cell.</p>
<p>For further details see http://wi.wu-wien.ac.at/rgf/diplomarbeiten/BakkStuff/2008/200809_Frysak/200809_Frysak_Automating_OOo_ooRexx_Nutshells.pdf.</p>
<listing>-- try to get a script context, will be .nil, if script was not invoked by OOo
x_ScriptContext = uno.getScriptContext()
if (x_ScriptContext &lt;&gt; .nil) then
do
   -- invoked by OOo as a macro

   -- get context
   x_ComponentContext = x_ScriptContext~getComponentContext
   -- get desktop (an XDesktop)
   x_Desktop  = x_ScriptContext~getDesktop
   -- get current document
   x_Document = x_ScriptContext~getDocument
end
else  
do
   -- called from outside of OOo, create a connection

   -- connect to Open Office and get component context
   x_ComponentContext = UNO.connect()
   -- create a desktop service and its interface
   service = &quot;{%see com.sun.star.frame.Desktop}&quot;
   s_Desktop = x_ComponentContext~getServiceManager~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}~createInstance(service)
   x_Desktop = s_Desktop~{%see com.sun.star.frame.XDesktop%XDesktop}
   -- get the last active document
   x_Document = x_Desktop~getCurrentComponent()  
end




/*
first we need to get the currently selected cell in the currently
selected sheet. If more than one cell is selected we first have to
reduce the amount of selected cells to only one, otherwise an error
occurs.
*/

-- query a list of spreadsheets (used later)
x_SpreadsheetDocument = x_Document~{%see com.sun.star.sheet.XSpreadsheetDocument%XSpreadsheetDocument}
x_Spreadsheets = x_SpreadsheetDocument~getSheets()
x_SpreadsheetIA = x_Spreadsheets~{%see com.sun.star.container.XIndexAccess%XIndexAccess}

-- now get the current selection
x_Model = x_Document~{%see com.sun.star.frame.XModel%XModel}
currentselection = x_Model~getCurrentSelection()

-- now  create a new selection object with only one cell selected
s_CurrentController = x_Model~getCurrentController()
x_MultiServiceFactory = x_Document~{%see com.sun.star.lang.XMultiServiceFactory%XMultiServiceFactory}
newselection = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.sheet.SheetCellRanges}&quot;)

-- use the new selection on the current sheet
x_View = s_CurrentController~{%see com.sun.star.view.XSelectionSupplier%XSelectionSupplier}
x_View~select(newselection)

-- get the currently selected cell and its address
noselectioncell = x_Model~getCurrentSelection()

x_CellAddressable = noselectioncell~{%see com.sun.star.sheet.XCellAddressable%XCellAddressable}
st_CellAddress = x_CellAddressable~getCellAddress()

-- restore old selection
x_View~select(currentselection)

-- get position of current cell and query cell object
currentcell.sheet = st_CellAddress~bsf.getFieldValue(&quot;Sheet&quot;)
currentcell.column = st_CellAddress~bsf.getFieldValue(&quot;Column&quot;)
currentcell.row = st_CellAddress~bsf.getFieldValue(&quot;Row&quot;)

s_Spreadsheet = x_SpreadsheetIA~getByIndex(currentcell.sheet)
x_Spreadsheet = s_Spreadsheet~{%see com.sun.star.sheet.XSpreadsheet%XSpreadsheet}

cell = uno.getCell(x_Spreadsheet, currentcell.column, currentcell.row)

-- create text interface on cell
x_TextRange = cell~{%see com.sun.star.text.XTextRange%XTextRange}
x_Text = x_TextRange~getText()

-- read cell textcontent
urlstring = x_Text~getString()

-- create url field
s_urlfield = x_MultiServiceFactory~createInstance(&quot;{%see com.sun.star.text.TextField.URL}&quot;)
urlproperties = s_urlfield~{%see com.sun.star.beans.XPropertySet%XPropertySet}
urlproperties~setPropertyValue(&quot;Representation&quot;, urlstring)
urlproperties~setPropertyValue(&quot;URL&quot;, urlstring)

-- clear cell and write urlfield
x_TextContent = s_urlfield~{%see com.sun.star.text.XTextContent%XTextContent}
x_Text~setString(&quot;&quot;)
x_Text~insertTextContent(x_Text~createTextCursor(), x_TextContent, .false)

::requires UNO.CLS</listing>
</answer>

<versions>
	<version number="2.4.1" status="tested"/>
</versions>

<operating-systems>
<operating-system name="All"/>
</operating-systems>

<changelog>
	<change author-id="1" date="2008-10-13">Initial version</change>
</changelog>

</snippet>
