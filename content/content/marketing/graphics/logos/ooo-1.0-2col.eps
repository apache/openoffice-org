%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (anne) (Wellcome Trust)%%Title: (OneNought logo 2col)%%CreationDate: (15/4/02) (22:50)%%BoundingBox: 1 317 609 476%%HiResBoundingBox: 1.3264 317.5039 608.2986 475.1584%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%%DocumentCustomColors: (PANTONE 286 CVU)%%CMYKCustomColor: 1 0.6 0 0.06 (PANTONE 286 CVU)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 31 -283 583 445%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 609.4488 158.7402%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 1 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: -102 684 1 826 581 18 0 1 3 40%AI5_OpenViewLayers: 7%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Brick)(Brick) 0 0 72 72 [%AI3_Tile(0 O 0 R 0.3 0.85 0.85 0 k 0.3 0.85 0.85 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR0 0 m0 72 L72 72 L72 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR0 68.4097 m72 68.4097 lS0 61.209 m72 61.209 LS0 54.0088 m72 54.0088 LS0 46.8076 m72 46.8076 LS0 39.6084 m72 39.6084 LS0 32.4072 m72 32.4072 LS0 25.207 m72 25.207 LS0 18.0059 m72 18.0059 LS0 10.8057 m72 10.8057 LS0 3.6064 m72 3.6064 LS68.4102 68.4097 m68.4102 61.2217 lS54.0098 68.4097 m54.0098 61.2217 LS39.6094 68.4097 m39.6094 61.2217 LS25.21 68.4097 m25.21 61.2217 LS10.8105 68.4097 m10.8105 61.2217 LS68.4102 53.9717 m68.4102 46.7842 lS54.0098 53.9717 m54.0098 46.7842 LS39.6094 53.9717 m39.6094 46.7842 LS25.21 53.9717 m25.21 46.7842 LS10.8105 53.9717 m10.8105 46.7842 LS68.4102 39.5967 m68.4102 32.4092 lS54.0098 39.5967 m54.0098 32.4092 LS39.6094 39.5967 m39.6094 32.4092 LS25.21 39.5967 m25.21 32.4092 LS10.8105 39.5967 m10.8105 32.4092 LS68.4102 25.2217 m68.4102 18.0342 lS54.0098 25.2217 m54.0098 18.0342 LS39.6094 25.2217 m39.6094 18.0342 LS25.21 25.2217 m25.21 18.0342 LS10.8105 25.2217 m10.8105 18.0342 LS68.4102 10.7842 m68.4102 3.5967 lS54.0098 10.7842 m54.0098 3.5967 LS39.6094 10.7842 m39.6094 3.5967 LS25.21 10.7842 m25.21 3.5967 LS10.8105 10.7842 m10.8105 3.5967 LS61.1973 3.5967 m61.1973 0 LS46.7969 3.5967 m46.7969 0 LS32.3965 3.5967 m32.3965 0 LS17.9971 3.5967 m17.9971 0 LS3.5967 3.5967 m3.5967 0 lS61.1973 18.0342 m61.1973 10.8467 LS46.7969 18.0342 m46.7969 10.8467 LS32.3965 18.0342 m32.3965 10.8467 LS17.9971 18.0342 m17.9971 10.8467 LS3.5967 18.0342 m3.5967 10.8467 lS61.1973 32.4092 m61.1973 25.2217 LS46.7969 32.4092 m46.7969 25.2217 LS17.9971 32.4092 m17.9971 25.2217 LS3.5967 32.4092 m3.5967 25.2217 lS61.1973 46.7842 m61.1973 39.5967 LS46.7969 46.7842 m46.7969 39.5967 LS32.3965 46.7842 m32.3965 39.5967 LS17.9971 46.7842 m17.9971 39.5967 LS3.5967 46.7842 m3.5967 39.5967 lS61.1973 61.2217 m61.1973 54.0347 LS46.7969 61.2217 m46.7969 54.0347 LS32.3965 61.2217 m32.3965 54.0347 LS17.9971 61.2217 m17.9971 54.0347 LS3.5967 61.2217 m3.5967 54.0347 lS61.1973 71.959 m61.1973 68.4717 LS46.7969 71.959 m46.7969 68.4717 LS32.3965 71.959 m32.3965 68.4717 LS17.9971 71.959 m17.9971 68.4717 LS3.5967 71.959 m3.5967 68.4717 lS32.3965 32.4092 m32.3965 25.2217 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Confetti)(Confetti) 4.85 3.617 76.85 75.617 [%AI3_Tile(0 O 0 R 1 g 1 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR4.85 3.617 m4.85 75.617 L76.85 75.617 L76.85 3.617 L4.85 3.617 Lf%AI6_EndPatternLayer) &(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 0.3 w 4 M []0 d%AI3_Note:0 D0 XR10.6 64.867 m7.85 62.867 lS9.1 8.617 m6.85 6.867 lS78.1 68.617 m74.85 67.867 lS76.85 56.867 m74.35 55.117 lS79.6 51.617 m76.6 51.617 lS76.35 44.117 m73.6 45.867 lS78.6 35.867 m76.6 34.367 lS76.1 23.867 m73.35 26.117 lS78.1 12.867 m73.85 13.617 lS68.35 14.617 m66.1 12.867 lS76.6 30.617 m73.6 30.617 lS62.85 58.117 m60.956 60.941 lS32.85 59.617 m31.196 62.181 lS47.891 64.061 m49.744 66.742 lS72.814 2.769 m73.928 5.729 lS67.976 2.633 m67.35 5.909 lS61.85 27.617 m59.956 30.441 lS53.504 56.053 m51.85 58.617 lS52.762 1.779 m52.876 4.776 lS45.391 5.311 m47.244 7.992 lS37.062 3.375 m35.639 5.43 lS55.165 34.828 m57.518 37.491 lS20.795 3.242 m22.12 5.193 lS14.097 4.747 m15.008 8.965 lS9.736 1.91 m8.073 4.225 lS31.891 5.573 m32.005 8.571 lS12.1 70.367 m15.6 68.867 lS9.35 54.867 m9.6 58.117 lS12.85 31.867 m14.35 28.117 lS10.1 37.367 m12.35 41.117 lS34.1 71.117 m31.85 68.617 lS38.35 71.117 m41.6 68.367 lS55.1 71.117 m58.35 69.117 lS57.35 65.117 m55.35 61.867 lS64.35 66.367 m69.35 68.617 lS71.85 62.867 m69.35 61.117 lS23.6 70.867 m23.6 67.867 lS20.6 65.867 m17.35 65.367 lS24.85 61.367 m25.35 58.117 lS25.85 65.867 m29.35 66.617 lS14.1 54.117 m16.85 56.117 lS12.35 11.617 m12.6 15.617 lS12.1 19.867 m14.35 22.367 lS26.1 9.867 m23.6 13.367 lS34.6 47.117 m32.1 45.367 lS62.6 41.867 m59.85 43.367 lS31.6 35.617 m27.85 36.367 lS36.35 26.117 m34.35 24.617 lS33.85 14.117 m31.1 16.367 lS37.1 9.867 m35.1 11.117 lS34.35 20.867 m31.35 20.867 lS44.6 56.617 m42.1 54.867 lS47.35 51.367 m44.35 51.367 lS44.1 43.867 m41.35 45.617 lS43.35 33.117 m42.6 30.617 lS43.85 23.617 m41.1 25.867 lS44.35 15.617 m42.35 16.867 lS67.823 31.1 m64.823 31.1 lS27.1 32.617 m29.6 30.867 lS31.85 55.117 m34.85 55.117 lS19.6 40.867 m22.1 39.117 lS16.85 35.617 m19.85 35.617 lS20.1 28.117 m22.85 29.867 lS52.1 42.617 m54.484 44.178 lS52.437 50.146 m54.821 48.325 lS59.572 54.133 m59.35 51.117 lS50.185 10.055 m53.234 9.928 lS51.187 15.896 m53.571 14.075 lS58.322 19.883 m59.445 16.823 lS53.1 32.117 m50.6 30.367 lS52.85 24.617 m49.6 25.617 lS61.85 9.117 m59.1 10.867 lS69.35 34.617 m66.6 36.367 lS67.1 23.617 m65.1 22.117 lS24.435 46.055 m27.484 45.928 lS25.437 51.896 m27.821 50.075 lS62.6 47.117 m65.321 46.575 lS19.85 19.867 m20.35 16.617 lS21.85 21.867 m25.35 22.617 lS37.6 62.867 m41.6 62.117 lS38.323 42.1 m38.823 38.6 lS69.35 52.617 m66.85 53.867 lS14.85 62.117 m18.1 59.367 lS9.6 46.117 m7.1 44.367 lS20.6 51.617 m18.6 50.117 lS46.141 70.811 m47.994 73.492 lS69.391 40.561 m71.244 43.242 lS38.641 49.311 m39.35 52.117 lS25.141 16.811 m25.85 19.617 lS36.6 32.867 m34.6 31.367 lS6.1 68.617 m2.85 67.867 lS4.85 56.867 m2.35 55.117 lS7.6 51.617 m4.6 51.617 lS6.6 35.867 m4.6 34.367 lS6.1 12.867 m1.85 13.617 lS4.6 30.617 m1.6 30.617 lS72.814 74.769 m73.928 77.729 lS67.976 74.633 m67.35 77.909 lS52.762 73.779 m52.876 76.776 lS37.062 75.375 m35.639 77.43 lS20.795 75.242 m22.12 77.193 lS9.736 73.91 m8.073 76.225 lS10.1 23.617 m6.35 24.367 lS73.217 18.276 m71.323 21.1 lS28.823 39.6 m29.505 42.389 lS49.6 38.617 m47.6 37.117 lS60.323 73.6 m62.323 76.6 lS60.323 1.6 m62.323 4.6 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Leaves - Fall )(Leaves - Fall ) 0 0 64.0781 78.9336 [%AI3_Tile(0 O 0 R 0.05 0.2 1 0 k 0.05 0.2 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR64.0781 78.9336 m64.0781 0 L0 0 L0 78.9336 L64.0781 78.9336 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.83 0 1 0 k 0.83 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR29.7578 0.9902 m30.4346 1.1914 30.7246 1.3428 V29.2559 4.0547 33.707 8.3359 34.627 9.0762 C35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 Cf13.8525 29.9844 m13.3281 29.5127 13.1309 29.25 V15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C7.2256 14.5 9.2598 15.6133 10.166 15.5645 C10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C8.1875 11.041 9.207 9.5107 10.166 7.0947 C10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C15.373 24.3779 15.373 27.2959 13.8525 29.9844 Cf41.2324 26.0742 m41.5518 26.7021 41.7549 26.959 V44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C46.3408 31.123 45.4395 33.084 44.2402 34.126 C45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C49.749 24.9766 50.584 26.9941 50.25 28.4609 C45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 Cf27.7578 38.7324 m28.4346 38.9316 28.7246 39.084 V27.2559 41.7969 31.707 46.0776 32.627 46.8169 C33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C38.002 44.582 37.3359 46.0547 36.5742 47.5039 C37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C30.7373 55.5146 30.166 54.314 29.2969 53.0366 C30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C30.9775 50.46 29.2852 51.2036 28.793 52.1958 C28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 Cf13.5195 70.3916 m12.9941 69.9209 12.7988 69.6587 V15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C7.8545 51.4497 8.873 49.9189 9.832 47.5039 C10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C15.041 64.7856 15.041 67.7046 13.5195 70.3916 Cf41.2324 64.4824 m41.5518 65.1113 41.7549 65.3682 V44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C51.2881 60.583 50.4268 61.8882 48.5645 62.333 C49.749 63.3862 50.584 65.4033 50.25 66.8691 C45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 Cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Stripes)(Stripes) 8.45 4.6001 80.45 76.6001 [%AI3_Tile(0 O 0 R 1 0.07 1 0 k 1 0.07 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.2 8.2 m80.7 8.2 LS8.2 22.6001 m80.7 22.6001 LS8.2 37.0002 m80.7 37.0002 LS8.2 51.4 m80.7 51.4 LS8.2 65.8001 m80.7 65.8001 LS8.2 15.4 m80.7 15.4 LS8.2 29.8001 m80.7 29.8001 LS8.2 44.2 m80.7 44.2 LS8.2 58.6001 m80.7 58.6001 LS8.2 73.0002 m80.7 73.0002 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Black, White)(Black, White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Chrome)(Chrome) 0 6 Bd[0<464646454545444444444343434342424241414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3B3A3A3A393939393838383837373736363636353535353434343333333332323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2B2B2B2B2A2A2A2A2929292828282827272727262626252525252424242323232322222222212121202020201F1F1F1F1E1E1E1D1D1D1D1C1C1C1C1B1B1B1A1A1A1A1919191818181817171717161616151515151414141413131312121212111111101010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0A0A0A0A0909090908080807070707060606050505050404040403030302020202010101010000><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><1F1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A19191919191919191818181818181818181717171717171717161616161616161615151515151515151514141414141414141313131313131313121212121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909090808080808080808070707070707070706060606060606060605050505050505050404040404040404030303030303030303020202020202020201010101010101010000000000>1 %_Br00.2751<6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F>1 %_Br0<00000101010102020202030303040404040505050506060607070707080808090909090A0A0A0A0B0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F1010101011111112121212131313141414141515151516161617171717181818181919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1F1F1F1F2020202021212122222222232323232424242525252526262626272727282828282929292A2A2A2A2B2B2B2B2C2C2C2D2D2D2D2E2E2E2E2F2F2F303030303131313132323233333333343434353535353636363637373738383838393939393A3A3A3B3B3B3B3C3C3C3C3D3D3D3E3E3E3E3F3F3F40404040414141414242424343434344444444454545464646><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><00000101020203030304040505050606070708080809090A0A0A0B0B0C0C0D0D0D0E0E0F0F1010101111121212131314141515151616171718181819191A1A1A1B1B1C1C1D1D1D1E1E1F1F1F20202121222222232324242525252626272727282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F2F30303131323232333334343435353636373737383839393A3A3A3B3B3C3C3C3D3D3E3E3F3F3F4040414142424243434444444545464647474748484949494A4A4B4B4C4C4C4D4D4E4E4F4F4F5050515151525253535454545555565657575758585959595A5A5B5B5C5C5C5D5D5E5E5F5F5F6060616161626263636464646565666666676768686969696A6A6B6B>1 %_Br10 %_Br<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><4D4C4C4C4B4B4B4A4A4A4A4949494848484747474746464645454544444444434343424242414141414040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3B3A3A3A3939393838383837373736363635353535343434333333323232323131313030302F2F2F2F2E2E2E2D2D2D2C2C2C2C2B2B2B2A2A2A292929292828282727272626262625252524242423232323222222212121202020201F1F1F1E1E1E1D1D1D1D1C1C1C1B1B1B1A1A1A1A1919191818181717171716161615151514141414131313121212111111111010100F0F0F0E0E0E0E0D0D0D0C0C0C0B0B0B0B0A0A0A0909090808080807070706060605050505040404030303020202020101010000>001 %_Br[1 0 50 92 %_Bs0 0.275 1 0.12 1 50 59 %_Bs0 0.275 1 0.42 1 50 50 %_Bs1 0 50 49 %_Bs1 0 50 41 %_Bs1 0.3 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_Bs1 1 0 0 1 50 80 %_Bs1 0.0279 0 0 1 50 60 %_Bs1 0 1 0 1 50 40 %_Bs0 0 1 0 1 50 20 %_Bs0 1 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E5>01 %_Br[0 0 1 0 1 52 19 %_Bs0 0.55 0.9 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0 gPc0 0 0 0 kPc0 0 0 1 kPc0 0.1 1 0 kPc0 0.5 0 0 kPc0 0.5 1 0 kPc1 0.55 1 0 kPc1 0.9 0.1 0 kPc0.15 1 1 0 kPc0.45 0.9 0 0 kPc0.5 0.4 0.3 0 kPc0.5 0.85 1 0 kPc0.75 0.05 1 0 kPc0.75 0.9 0 0 kPc0.8 0.05 0 0 kPcBb2 (Black, White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPcBb2 (Chrome) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPcBb2 (Rainbow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BBPc(Brick) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Confetti) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Leaves - Fall ) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc(Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc1 0.6 0 0.06 (PANTONE 286 CVU) 0 xPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Auu*u0 O0 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR14.1802 372.5231 m14.1802 391.2192 20.5094 397.9387 28.3973 397.9387 c36.2848 397.9387 42.6145 391.2192 42.6145 372.5231 c42.6145 353.8262 36.2848 347.1067 28.3973 347.1067 c20.5094 347.1067 14.1802 353.8262 14.1802 372.5231 cf1 D1.3264 372.5231 m1.3264 348.0809 14.2773 337.5641 28.3973 337.5641 c42.5174 337.5641 55.4684 348.0809 55.4684 372.5231 c55.4684 396.9645 42.5174 407.4813 28.3973 407.4813 c14.2773 407.4813 1.3264 396.9645 1.3264 372.5231 cf*U*u0 D71.827 363.4665 m71.827 372.912 74.2617 380.6051 81.3703 380.6051 c88.3811 380.6051 90.2313 374.7622 90.2313 363.1746 c90.2313 353.1446 87.8944 346.6199 81.1754 346.6199 c74.5536 346.6199 71.827 353.7283 71.827 363.4665 cf1 D59.752 317.5039 m71.827 317.5039 L71.827 345.744 L72.0219 345.744 l73.7743 341.8488 77.7671 337.7588 84.9729 337.7588 c95.7823 337.7588 102.3064 347.3016 102.3064 363.6614 c102.3064 377.5865 97.1456 389.4669 84.6809 389.4669 c76.8906 389.4669 73.2875 385.182 71.3402 380.8972 C71.0477 380.8972 l71.0477 384.3056 70.8534 387.227 70.6586 388.6874 C59.3623 388.6874 l59.6549 386.8372 59.752 383.7216 59.752 380.1184 c59.752 317.5039 Lf*U*u0 D117.3011 367.9461 m117.3011 374.568 119.93 381.2868 126.2597 381.2868 c131.7131 381.2868 134.634 376.8072 134.634 367.9461 c117.3011 367.9461 Lf1 D143.2035 350.5151 m140.9637 348.8596 137.4583 346.6199 130.0571 346.6199 c120.7093 346.6199 117.3011 351.7812 117.3011 360.3502 C146.3199 360.3502 L146.3199 362.6878 l146.3199 383.137 137.0687 389.4669 126.2597 389.4669 c113.5031 389.4669 105.6157 377.8786 105.6157 362.882 c105.6157 349.3466 112.6265 337.7588 128.7916 337.7588 c135.9973 337.7588 141.2557 339.901 143.7875 340.9723 c143.2035 350.5151 Lf*U*u0 D149.8247 380.4104 m149.8247 383.5267 149.7276 386.4476 149.435 388.6874 c160.7313 388.6874 L160.8284 386.1555 161.1204 383.5267 161.1204 380.9949 c161.413 380.9949 L161.3152 380.9949 L163.0683 384.0135 166.4765 389.4669 174.6565 389.4669 c186.0493 389.4669 189.4576 380.9949 189.4576 370.867 c189.4576 338.5377 L177.3826 338.5377 L177.3826 368.6278 L177.3826 376.3204 175.4352 379.5337 170.4688 379.5337 c164.1396 379.5337 161.8998 374.1782 161.8998 367.7512 c161.8998 338.5377 L149.8247 338.5377 L149.8247 380.4104 lf*U*u1 0.6 0 0.06 (PANTONE 286 CVU) 0 x206.4009 372.5231 m206.4009 391.2192 212.7305 397.9387 220.618 397.9387 c228.506 397.9387 234.8352 391.2192 234.8352 372.5231 c234.8352 353.8262 228.506 347.1067 220.618 347.1067 c212.7305 347.1067 206.4009 353.8262 206.4009 372.5231 cf1 D193.547 372.5231 m193.547 348.0809 206.498 337.5641 220.618 337.5641 c234.738 337.5641 247.6895 348.0809 247.6895 372.5231 c247.6895 396.9645 234.738 407.4813 220.618 407.4813 c206.498 407.4813 193.547 396.9645 193.547 372.5231 cf*U*u0 D255.6734 379.8264 m247.2986 379.8264 L247.2986 388.6874 L255.6734 388.6874 L255.6734 398.9123 L255.6734 406.1181 259.0811 412.7398 270.0848 412.7398 c273.2995 412.7398 276.4146 412.0581 278.7515 411.5713 c278.2647 402.8074 L276.8043 403.1972 275.2467 403.5863 273.4937 403.5863 c269.9877 403.5863 267.7479 401.1522 267.7479 397.3542 c267.7479 388.6874 L276.9014 388.6874 L276.9014 379.8264 L267.7479 379.8264 L267.7479 338.5377 L255.6734 338.5377 L255.6734 379.8264 lf*U*u287.1246 379.8264 m278.7504 379.8264 L278.7504 388.6874 L287.1246 388.6874 L287.1246 398.9123 L287.1246 406.1181 290.5334 412.7398 301.5372 412.7398 c304.7506 412.7398 307.8669 412.0581 310.2038 411.5713 c309.7171 402.8074 L308.2566 403.1972 306.6979 403.5863 304.9448 403.5863 c301.44 403.5863 299.2002 401.1522 299.2002 397.3542 c299.2002 388.6874 L308.3537 388.6874 L308.3537 379.8264 L299.2002 379.8264 L299.2002 338.5377 L287.1246 338.5377 L287.1246 379.8264 lf*U*u315.8515 388.6874 m327.9258 388.6874 L327.9258 338.5377 L315.8515 338.5377 L315.8515 388.6874 lf*U*u368.2392 339.8038 m365.4154 338.7326 361.2284 337.7588 356.359 337.7588 c339.8048 337.7588 332.7941 349.3466 332.7941 363.5637 c332.7941 377.8786 340.1946 389.4669 357.0412 389.4669 c360.8387 389.4669 365.3183 388.2982 367.5582 387.4217 c366.8759 377.8786 L364.7344 378.9499 361.7152 380.3133 358.4046 380.3133 c349.251 380.3133 345.2581 374.1782 345.2581 363.4665 c345.2581 354.1181 349.7379 346.9125 358.9886 346.9125 c361.9106 346.9125 365.9022 348.2758 367.5582 349.3466 C368.2392 339.8038 lf*U*u380.1194 367.9461 m380.1194 374.568 382.7478 381.2868 389.0775 381.2868 c394.5308 381.2868 397.4516 376.8072 397.4516 367.9461 c380.1194 367.9461 Lf1 D406.0213 350.5151 m403.7815 348.8596 400.2766 346.6199 392.8749 346.6199 c383.5271 346.6199 380.1194 351.7812 380.1194 360.3502 C409.1376 360.3502 L409.1376 362.6878 l409.1376 383.137 399.8869 389.4669 389.0775 389.4669 c376.3208 389.4669 368.4334 377.8786 368.4334 362.882 c368.4334 349.3466 375.4443 337.7588 391.6099 337.7588 c398.8151 337.7588 404.0741 339.901 406.6052 340.9723 c406.0213 350.5151 Lf*U*u0 D421.2757 342.8285 m421.2757 339.0646 420.4483 338.0108 416.5335 338.0108 c412.5441 338.0108 411.7156 339.0646 411.7156 342.8285 c411.7156 346.5167 412.5441 347.7212 416.5335 347.7212 c420.5227 347.7212 421.2757 346.6679 421.2757 342.8285 cf*U*u328.7209 404.1833 m328.7209 398.841 327.5469 397.3451 321.9906 397.3451 c316.3286 397.3451 315.1511 398.841 315.1511 404.1833 c315.1511 409.4178 316.3286 411.1277 321.9906 411.1277 c327.6525 411.1277 328.7209 409.6325 328.7209 404.1833 cf*U*u427.976 357.7333 m427.976 367.3688 430.7602 372.3372 436.7829 372.3372 c442.8046 372.3372 445.59 367.3688 445.59 357.7333 c445.59 348.0977 442.8046 343.1295 436.7829 343.1295 c430.7602 343.1295 427.976 348.0977 427.976 357.7333 cf1 D421.3512 357.7333 m421.3512 345.6889 426.6211 338.0108 436.7829 338.0108 c446.9449 338.0108 452.2148 345.6889 452.2148 357.7333 c452.2148 369.7778 446.9449 377.4559 436.7829 377.4559 c426.6211 377.4559 421.3512 369.7778 421.3512 357.7333 cf*U*u0 D456.5049 368.6483 m456.5049 371.4337 456.2784 374.2191 456.204 376.9288 c462.3012 376.9288 L462.5266 370.9067 L462.6777 370.9067 L464.7102 375.574 467.9464 377.4559 473.5927 377.4559 c473.5927 371.2077 L472.8397 371.3581 472.0123 371.4337 471.1838 371.4337 c466.2905 371.4337 462.8277 367.2185 462.8277 358.8621 c462.8277 338.5377 L456.5049 338.5377 L456.5049 368.6483 lf*U*u479.4633 357.7333 m479.4633 367.3688 482.0976 372.3372 487.895 372.3372 c493.6912 372.3372 496.3255 367.3688 496.3255 357.7333 c496.3255 348.0977 493.6912 343.1295 487.895 343.1295 c482.0976 343.1295 479.4633 348.0977 479.4633 357.7333 cf1 D502.6481 369.9282 m502.6481 372.2617 502.8748 374.6705 502.9503 376.9288 C496.8519 376.9288 L496.6265 371.3581 L496.4755 371.3581 l494.3686 375.0469 490.9058 377.4559 487.0665 377.4559 c478.4848 377.4559 473.1407 370.9822 473.1407 357.7333 c473.1407 344.4844 478.4848 338.0108 486.3889 338.0108 c490.6048 338.0108 493.9922 340.1186 496.4755 344.4844 C496.6265 344.4844 L496.6265 338.462 l496.6265 331.8379 493.6157 327.2462 485.8613 327.2462 c482.3997 327.2462 478.0327 328.7516 475.3229 330.5585 C475.022 324.1598 l477.8074 323.031 483.0016 321.8265 486.2379 321.8265 c494.6696 321.8265 502.6481 326.2678 502.6481 336.8818 c502.6481 369.9282 Lf*U0 g0 D54.8424 427.1417 m88.281 436.9869 112.9329 434.4582 130.8792 419.5984 C149.3757 438.0926 186.3617 442.7138 197.9205 440.4055 C164.133 456.2653 135.6885 445.5193 129.0512 437.3023 C110.4041 447.4165 66.4013 443.3229 54.8424 427.1417 Cf140.8193 467.8495 m164.7649 470.8038 185.2549 468.3361 198.5176 458.016 C213.6449 466.8589 242.1595 466.6587 250.8683 464.5173 C220.0921 475.7631 205.2119 471.8146 197.7718 468.6708 C178.039 476.1768 158.4441 478.7044 140.8193 467.8495 CfU*u533.1681 406.7283 m543.9833 406.7283 L543.9833 339.0897 L531.7726 339.0897 L531.7726 391.3206 L521.4807 382.018 L515.3753 390.8361 L533.1681 406.7283 lf*U*u565.9098 372.2779 m565.9098 389.236 570.5324 407.4537 587.017 407.4537 c604.8099 407.4537 608.2986 387.9763 608.2986 372.2779 c608.2986 356.5796 604.6354 337.4895 587.017 337.4895 c568.2648 337.4895 565.9098 358.13 565.9098 372.2779 cf1 D596.0879 372.2779 m596.0879 380.9992 596.0879 397.3759 587.017 397.3759 c578.1205 397.3759 578.1205 380.9992 578.1205 372.2779 c578.1205 363.7505 578.0334 347.5675 587.017 347.5675 c596.1751 347.5675 596.0879 363.7505 596.0879 372.2779 cf*U*u0 D564.2818 345.0485 m564.2818 339.7059 563.1079 338.2102 557.5516 338.2102 c551.8896 338.2102 550.7121 339.7059 550.7121 345.0485 c550.7121 350.283 551.8896 351.9929 557.5516 351.9929 c563.2135 351.9929 564.2818 350.4976 564.2818 345.0485 cf*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF