<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/2000/REC-xhtml1-20000126/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
<style type="text/css">
/* <![CDATA[ */ @import "/branding/css/tigris.css"; /* ]]> */
</style>
  <script src="/branding/scripts/sc.js" type="text/javascript"></script>
  <link rel="stylesheet" type="text/css" href="/branding/css/print.css" media="print" />

  <title>プロジェクト・ファイルとディレクトリの管理</title>
 </head>

 <body class="docs" onload="self.focus()">
  <div class="docs" id="ddcvscvsmanaging">
   <h2>CVS コマンド・ラインを使ったプロジェクト・ファイルとディレクトリの管理</h2>

   <div id="toc">
    <ul>
     <li><strong><a href="/nonav/servlets/HelpTOC">ヘルプ索引</a></strong></li>
    </ul>

    <ul>
     <li>
      <a href="/nonav/docs/ddCVS.html">CVS を使用したソースコードバージョン管理について</a> 

      <ul>
       <li><a href="/nonav/docs/ddCVS_cvsglossary.html">バージョン管理グロッサリ</a></li>

       <li><a href="/nonav/docs/ddUsingCVS_command-line.html">プロジェクトソースファイルにアクセスするために CVS コマンドラインを使用</a></li>

       <li><a href="/nonav/docs/ddCVS_cvscontributing.html">CVS によるソースコード変更の寄稿</a></li>

       <li>
        CVS を使ったプロジェクト・ファイルとディレクトリの管理 

        <ul>
         <li><a href="#cvsrelease">ファイルのリリース</a></li>

         <li><a href="#cvsremove">ファイルの削除</a></li>

         <li><a href="#cvsrenameandmove">ファイルのリネームと移動</a></li>

         <li><a href="#cvsimport">既存ソースファイルのインポート</a></li>

         <li><a href="#cvsandrcs">CVS とRCS</a></li>

         <li><a href="#keywords">キーワードの使用</a></li>

         <li><a href="#aboutbranching">タグとブランチについて</a></li>
        </ul>
       </li>
      </ul>
     </li>
    </ul>
   </div>

   <h3><a id="cvsrelease" name="cvsrelease">ファイルとディレクトリのリリース</a></h3>

   <p>プロジェクトの開発サイクルのある時点で、プロジェクトのソース・リポジトリの管理に不必要になったり、古くなったファイルやディレクトリを扱う作業が必要となります。 
たとえば、モジュール内の特定の機能を破棄を決定するような場合です。または、インフラストラクチャの変更によって、ファイルの削除や移動が必要が生じる場合もあります。 このセクションでは、CVS でこのようなファイル管理問題を扱う場合の方法について説明します。</p>

   <p><i>リリース</i>とは、プロジェクトではもう使用されていない特定のディレクトリやモジュールを指定する方法を意味します。リリースを行うコマンドは、作業用コピー内で実行され、指定したディレクトリやファイルの cvs チェックアウトを実質的にキャンセルします。ファイルやディレクトリを明確に削除しない限り、ファイルやディレクトリは、ファイルの全リビジョン履歴を含めた情報とともにリポジトリ内に残ります。ただし、チェックアウトされる作業用コピーには含まれなくなります。</p>

   <p>ファイルやディレクトリをリリースするコマンドは、次のとおりです。</p>

   <p><code>cvs rel filename</code> (または <code>/directory_name</code>)</p>

   <p><a href="http://www.gnu.org/manual/cvs/html_chapter/cvs_20.html#SEC122">リリースについての詳細</a></p>

   <h3><a id="cvsremove" name="cvsremove">ファイルの削除</a></h3>

   <p><i>削除</i>とは、プロジェクトのソース・リポジトリの一部としてファイルが必要なくなった場合にファイルを除外するもう 1 つの方法です。これには、まずローカルシステムでチェックアウトした作業用コピーからファイルを削除します。</p>

   <p>それから、共有リポジトリからファイルを削除するために、次のコマンドを入力します。</p>

   <p><code>cvs remove filename</code></p>

   <p>1 つまたは複数のファイルを削除したら、変更をコミットしなければなりません。</p>

   <p>「<b>cvs remove</b>」 (または「<b>cvs rm</b>」) 
を使うと、古いファイルは完全に削除されるのではなく、完全なリビジョン履歴とともに「attic (屋根裏)」と呼ばれる CVS に保存されます。</p>

   <ul>
    <li><a href="http://www.gnu.org/manual/cvs/html_chapter/cvs_12.html#SEC62">ファイルの削除についての詳細</a></li>

    <li><a href="http://cvsbook.red-bean.com/cvsbook.html#What_Happens_When_You_Remove_A_File">ファイルを削除するとどうなるか</a></li>
   </ul>

   <h3><a id="cvsrenameandmove" name="cvsrenameandmove">ファイルおよびディレクトリの名前変更と移動</a></h3>

   <p>既存のソースコードをリポジトリにインポートする場合、ファイルやディレクトリの名前を変更したり、移動したい場合があります。</p>

   <p>作業用コピーで名前を変更する最良の方法には、次の複数のステップを実行します。</p>

   <p><code>cvs rm old_filename</code></p>

   <p>古い名前を削除します。それから、</p>

   <p><code>cvs add new_filename</code></p>

   <p>さらに</p>

   <p><code>cvs commit new_filename</code></p>

   <p>ディレクトリの削除や名前の変更について、CVS には既定な方法はありません。ただし、新しいディレクトリを作成し、必要なファイルをそのディレクトリに移動し、古いディレクトリから不必要なファイルを削除してから古いディレクトリを使用しないようにすると、結果としてにディレクトリの名前を変更できます。その後、次のコマンドを使って作業用コピーを次回にチェックアウトしたときに、空のディレクトリを削除することができます。</p>

   <p><code>cvs checkout -P</code></p>

   <p>ファイルのないディレクトリを削除するには、次のコマンドを使ってアップデートすることによっても実行できます。</p>

   <p><code>cvs update -dP</code></p>

   <ul>
    <li><a href="http://www.gnu.org/manual/cvs/html_chapter/cvs_14.html#SEC67">ファイルの移動と名前の変更についての詳細</a></li>

    <li><a href="http://www.gnu.org/manual/cvs/html_chapter/cvs_15.html#SEC71">ファイルの移動と名前の変更についての詳細</a></li>
   </ul>

   <h3><a id="cvsimport" name="cvsimport">既存コードのインポート</a></h3>

   <p>プロジェクトに既存のファイルを追加する場合は、次のコマンドを使用します。</p>

   <p><code>cvs import filename</code></p>

   <p>インポート処理では、高度な「cvs add」を使って複数のファイルを一度に追加できます。既存の<i>全</i>ディレクトリおよびファイルをインポートするには、トップレベルのディレクトリで次のコマンドを入力します。</p>

   <p><code>cvs import -m "log message" projectname</code></p>

   <p>これは、このサイトにあるプロジェクトの CVS リポジトリにファイルおよびディレクトリを作成します。これらのファイルやディレクトリを元の状態で保存したい場合は、ほかの開発者がプロジェクト・ファイルの作業用コピーをチェックアウトし始める前に、元のファイル・セットにタグを付けるまたはアーカイブしておくことをお勧めします。</p>

   <p>既存のファイルがすでにバージョン管理下にある場合は (ほかの CVS リポジトリにある、または RCS のような異なるバージョン管理システムにある）、ファイルの履歴を維持する既存ファイルの自動化されたインポート方法はありません。 cvs import コマンドを使い、ファイルのコピーや新規ファイルとしての作成をすると、ファイルの履歴は維持されません。</p>

   <h3><a id="cvsandrcs" name="cvsandrcs">CVS と RCS</a></h3>

   <p>RCS をすでに使用している場合は、RCS および CVS は、個々のファイルのバージョン管理履歴を保存するために同じような形式を使用していることはご存知のことでしょう。 しかし、CVS を使用する場合には、次の 2 つの重要な違いに注意してください。</p>

   <ul>
    <li>まず、RCS の主要な概念はファイルのロックだということです。この方法では、ファイルがチェックアウトされているときは、ほかの開発者がファイルをチェックアウトしたり、変更することができなくなります。ファイルをロックすることによる利点は、開発者がファイル内の競合した変更について作業を気にする必要がないことです。 RCS は、ファイルを一度に 1 人のユーザしか変更できないようにすることによりファイルを保護します。 このため、RCS の欠点は、ほかの開発者がファイルをチェックアウトしている間は、ファイルへの変更をコミットできないということです。</li>

    <li>CVS の主要なチェックアウト概念では、複数の開発者がファイルのチェックアウト、変更、コミットを同時に実行することができるため、リモートで地理的に離れた開発者がいるプロジェクトにとって大変役立ちます。CVS のバージョン制御を受けるプロジェクトでは、この概念を使用しているために、マージする場合での競合に対応しなければなりません。このような競合を解決するには、手作業でファイルを編集するしかありません。 このため、CVS を使ったプロジェクトのワークフローは、多少異なる部分があります。</li>
   </ul>

   <p><a href="http://www.cvshome.org/cyclic/cyclic-pages/rcs.html">RCS と CVS についての詳細</a></p>

   <h3><a id="keywords" name="keywords">キーワードの置換</a></h3>

   <p>キーワードの置換 (キーワードの展開ともいう） は、開発者には便利な RCS にもある機能です。基本的にキーワードは、ソース・ファイルに永久にバージョン情報を埋め込む役割を果たします。以降ファイルを編集するときにはいつでも、特定のキーワードに関連付けた完全なバージョン情報を含む文字列と置き換えることができます。</p>

   <p>たとえば、次のようなキーワードがあります。</p>

   <p><code>$Author: tigrisc $</code></p>

   <p>ファイル内には、このリビジョンをチェックインしたユーザのログイン名が永久に残ります。</p>

   <p>キーワードの置換は、ファイルが CVS リポジトリの一部でなくなった時点以降のファイル・バージョンを追跡する方法です。キーワードの置換を設定したり、使用不可にすることもできます。</p>

   <p><a href="http://cvshome.org/docs/manual/cvs_12.html#SEC98">キーワードについて詳細 (共通のキーワードリストを含む)</a></p>

   <h3><a id="aboutbranching" name="aboutbranching">タグとブランチについて</a></h3>

   <p>このサイトでホストされているプロジェクトの CVS リポジトリは、ソース・ファイルのタグとブランチをサポートしています。プロジェクトのある時点で、プロジェクトの開発作業を同時に複数の方向に進行させたいような場合があります。 単一で直線的な開発パスを維持する代わりに、CVS のブランチ機能を使って、プロジェクトにこれまで費やした労力の結果に影響を与えることなく付随的な開発用のソース・ツリーを展開する、または分割することができます。ブランチ操作を行う理由としては、次のような例があります。</p>

   <ul>
    <li>QA およびテスト用にプロジェクトのソース・ファイルで明確に定義されている機能のセットを区別する場合。または </li>

    <li>プロジェクトの進行状況に影響を与えずに、追加機能を試してみたいような場合。</li>
   </ul>

   <p>タグ機能の使い方は、ブランチ機能の使い方と同時に説明しなければなりません。この 2 つの操作は同時に使用されるためです。タグ機能を使うと、プロジェクトのある時点でプロジェクト全体の状態の「スナップショットを撮る」ことができます。これにより、特定の特徴を持つビルドを維持できます。 
CVS は、個々のファイル・リビジョンを管理するため、タグ機能は、プロジェクトのソース・コードの全体的な状態のベンチマークを示すための重要なオプションです。 
タグに含まれるファイルは、それぞれのリビジョン番号において異なる時点のものとなります。</p>

   <p>ブランチおよびタグ機能の重要な違いは、2 つの操作を同時に使用する理由でもあります。</p>

   <p>ブランチ操作は、<i>個々のファイル</i>のリビジョン番号に影響します。一方、タグ操作は、共通の識別マーカーをある時点の<i>全プロジェクト・ファイル</i>に割り当てます。</p>

   <p>たとえば、ブランチが作成された時点でプロジェクト・ファイルにタグを挿入するのが普通です。</p>

   <p>最終的に、満足のいく結果を持つプロジェクトのブランチは、主要な開発パスに戻され、統合されます。大規模で長期的なプロジェクトでは頻繁に行われますが、このマージが行われる時点でもタグが作成されます。</p>

   <p><a id="cvstag" name="cvstag">プロジェクト・ファイルにタグを挿入するには、次のコマンドを入力します。</a></p>

   <p><code>cvs tag unique_tag_name</code></p>

   <p>タグ名は、リリース名、日付、製品のバージョン識別子など自由に選択できます。</p>

   <p><a id="cvsbranch" name="cvsbranch">ブランチを作成するには、次のコマンドを入力します。</a></p>

   <p><code>cvs tag -b unique_tag_name</code></p>

   <p>ブランチおよびタグ操作は、さまざまな考慮点やオプションがあるため、複雑なトピックです。より詳しい情報や説明が必要な場合は、次のリソースを利用してください。</p>

   <ul>
    <li>cvshome.org: <a href="http://www.cvshome.org/docs/manual/cvs_4.html#SEC48">「タグとブランチについて詳細」</a></li>

    <li>The Cederqvist Manual: <a href="http://www.gnu.org/manual/cvs/html_chapter/cvs_8.html#SEC50">「ブランチ」</a></li>

    <li>
     CVS を使ったオープン・ソース開発:

     <ul>
      <li><a href="http://cvsbook.red-bean.com/cvsbook.html#Marking_A_Moment_In_Time__Tags_">"Marking A Moment In Time (Tags)"</a></li>

      <li><a href="http://cvsbook.red-bean.com/cvsbook.html#Branches">「ブランチ」</a></li>
     </ul>
    </li>
   </ul>

   <div class="courtesylinks">
    <p><a href="#toc">トップ</a> | <a href="/nonav/servlets/HelpTOC">ヘルプ索引</a></p>
   </div>
  </div>
 </body>
</html>


