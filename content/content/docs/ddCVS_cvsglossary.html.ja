<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/2000/REC-xhtml1-20000126/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
<style type="text/css">
/* <![CDATA[ */ @import "/branding/css/tigris.css"; /* ]]> */
</style>
  <script src="/branding/scripts/sc.js" type="text/javascript"></script>
  <link rel="stylesheet" type="text/css" href="/branding/css/print.css" media="print" />

  <title>バージョン管理グロッサリ</title>
 </head>

 <body class="docs" onload="self.focus()">
  <div class="docs" id="ddcvscvsglossary">
   <h2>バージョン管理グロッサリ</h2>

   <div id="toc">
    <ul>
     <li><strong><a href="/nonav/servlets/HelpTOC">ヘルプ索引</a></strong></li>
    </ul>

    <ul>
     <li>
      <a href="/nonav/docs/ddCVS.html">CVS を使用したソースコードバージョン管理について</a> 

      <ul>
       <li>
        バージョン管理グロッサリ 

        <ul>
         <li><a href="#whatis">バージョン管理とは何か?</a></li>

         <li><a href="#keyterms">バージョン管理の重要語</a></li>

         <li><a href="#devcycle">コピー・編集・マージ開発のサイクル</a></li>
        </ul>
       </li>

       <li><a href="/nonav/docs/ddUsingCVS_command-line.html">プロジェクト・ソースファイルへのアクセスのためのコマンドライン CVS の利用</a></li>

       <li><a href="/nonav/docs/ddCVS_cvsmanaging.html">CVS によるプロジェクト・ファイルおよびディレクトリの管理</a></li>
      </ul>
     </li>
    </ul>
   </div>

   <h3><a id="whatis" name="whatis">バージョン管理とは何か?</a></h3>

   <p>バージョン管理システムとは、時間を追って作成されるファイルの全バージョンのセットを管理し、整理するシステムです。バージョン管理システムを使うと、前のバージョンに戻ったり、変更箇所を確認するために 2 つのバージョンを比較することができます。この方法により、ファイルへの変更履歴の正確なログを保持することができるだけでなく、前のバージョンのファイルを復元することができます。さらに、バージョン管理システムを使うと、同じソース・リポジトリにマージすることにより、インターネットや社内ネットワーク上で開発プロジェクトを別の場所から共有して作業を進めることができます。</p>

   <h3><a id="keyterms" name="keyterms">バージョン管理の重要語</a></h3>

   <dl>
    <dt>ファイルまたはディレクトリのチェックイン</dt>

    <dd>作業ディレクトリを新しいバージョンとしてリポジトリにコピーします。</dd>

    <dt>ファイルまたはディレクトリのチェックアウト</dt>

    <dd>ファイルの最新バージョンをリポジトリから作業用スペースにコピーします。ディレクトリのチェックアウトを行うと、そのディレクトリにある全ファイルとサブディレクトリがコピーされます</dd>

    <dt>ファイルまたはディレクトリのコミット</dt>

    <dd>ファイルまたはディレクトリのチェックインと同じです。「変更をコミットした」ということは、ユーザが変更を加えて、これらの変更をリポジトリに戻したということを意味します。</dd>

    <dt>競合</dt>

    <dd>同じファイルに 2 人の開発者が同時に変更を行ってリポジトリに変更をコミットする場合、変更が競合することがあります。競合が発生した場合には CVS が競合を検出します。変更を確認する前に誰かが競合を解決しなければなりません。</dd>

    <dt>マージ</dt>

    <dd>ソース・リポジトリにある同じファイルの異なる作業用コピーに加えられた複数の変更を統合する作業を指します。マージは、ファイルをロックする方法ではなく同時に複数のユーザによる作業を可能にするために競合を管理する方法で、作業が 1 つのバージョンに統合されます。2 種類の変更セットが異なる行に適用されている場合はマージ作業がスムーズに進み簡単にマージできます。ファイルへの変更が同じ行または同じ複数行にある場合は競合が生じ、いずれかがソース・リポジトリで変更をコミットする前にファイルを手作業で編集しなければなりません。 </dd>

    <dt>リポジトリ</dt>

    <dd>バージョン管理下にある全ファイルの完全なバージョン履歴を保存しておく共有データベースです</dd>

    <dt>解決</dt>

    <dd>複数のユーザによって加えられた変更の競合は、ファイルを手作業で編集して解決します。いずれかがファイルを 1 
  行ずつ見直し、ある変更を受け入れまたその他の変更を削除していきます。競合のあるファイルは、競合がすべて解決されるまで、ソース・リポジトリでコミットすることはできません。 </dd>

    <dt>リビジョン</dt>

    <dd>個々のファイルに対する特定のアップデートに番号を付けたドラフトのことです。ファイルを編集してリポジトリにコミットするたびに、ファイルのリビジョン番号が増えます。</dd>

    <dt>バージョン</dt>

    <dd>ある時点でタグおよび名前を付けた<i>ファイルのセット</i>を識別するために使用される連番方法です。</dd>

    <dt>作業用スペース</dt>

    <dd>ローカル・ハード・ディスクや Unix ユーザ・アカウントで編集するファイルのコピーです。作業用スペースでファイルを編集すると、ファイルはリポジトリと同期化されていない状態となります。これは作業が進んだ事を意味します。その後、ほかの開発者が変更箇所を閲覧できるように、変更したファイルをリポジトリに戻します。</dd>
   </dl>

   <h3><a id="devcycle" name="devcycle">コピー・編集・マージ開発のサイクル</a></h3>

   <p>CVS は非常に強力なツールであるため、学習には時間がかかる場合があります。CVS の完全な知識ベースを提供する書籍や Web サイトが多数あります (このサイトのメイン CVS ページの下部には、良いリソースが多数記載されています)。ただし、すべての知識を吸収しなくても、CVS をソフトウェア開発の実践に直ちに、しかも効率良く統合することができます。</p>

   <p>CVS を使うと、プロジェクト全体の開発サイクルを追跡しながら、独自の開発内で作業を行うことができます。</p>

   <ol>
    <li>プロジェクトのリポジトリまたはプロジェクトのソースファイルを集めたモジュールを<i>チェックアウトする</i>、つまり独自の作業用コピーを取得することにより、プロジェクトの作業を開始します。</li>

    <li>
     これらのファイルに変更を加えたり、新しいファイルを作成して、プロジェクトの作業を進めます。

     <p>この作業サイクルは、CVS には直接関係ありません。ローカル・マシンのファイル・エディタを使ってプロジェクト・ファイルの作業用コピーに変更を加えます。編集したファイルを保存してコンパイルし、ほかの開発者が同じプロジェクト・ファイルで行っている作業に影響を与えることなく、変更が自分の作業している特定のプロジェクト・モジュールにどのように反映されるかを確認できます。変更をプロジェクト・リポジトリでコミットするまでは、加えた変更はほかの開発者の作業には影響しません。</p>
    </li>

    <li>自分の行った変更がプロジェクト全体を壊したりすることがないように、自分の作業用スペースで最新の変更をテストし、編集します。</li>

    <li>
     最後に、自分の作業をメインまたはプロジェクト・ファイルの「トップ」部分に<i>チェックイン</i>し、CVS の用語で<i>ヘッド</i>と言われる最新の作業バージョンに自分の変更をマージします。 

     <p>自分の変更をほかの開発者の作業にマージして変更をコミットする部分は、CVS の最も強力な部分ですが、同時にこれは最も危険な部分でもあります。どの変更をコミットしてよいかがわからなくなったり、間違って自分の変更でほかの開発者の作業を上書きしてしまうことがあるからです。自分が行った変更は、ある時点で必ずほかの開発者の作業と競合します。自分の作業用コピーをアップデートする方法やタイミング、マージの競合の解決方法を理解することは、コラボレーション開発プロジェクトで CVS を使用するために特に重要な問題となります。</p>
    </li>
   </ol>

   <p>このコピー・変更・マージのサイクルは、参加しているすべての開発者によってプロジェクトが続く限り繰り返されます。CVS は、参加者全員がプロジェクト・ファイルで同時に作業し、ほかの開発者によって加えられた最新の変更をつねに維持し、ほかの開発者の作業サイクルを妨害することなくプロジェクト全体に自分の変更がどのように影響するかをテストすることを可能にします。</p>

   <p>CVS を初めてお使いになる場合は、次のページを参照してください。</p>

   <ul>
    <li><a href="http://www.cvshome.org/new_users.html">新しいユーザへの CVS</a>(文献)</li>

    <li><a href="http://cvsbook.red-bean.com/cvsbook.html#An_Overview_of_CVS">CVS の概要</a>  (Karl Fogel の書籍 <I>(CVS を使ったオープン・ソース開発)</i>のオンライン・バージョンから) </li>
   </ul>

   <div class="courtesylinks">
    <p><a href="#toc">トップ</a> | <a href="/nonav/servlets/HelpTOC">ヘルプ索引</a></p>
   </div>
  </div>
 </body>
</html>


